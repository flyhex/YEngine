#ifndef ACTIONTABLEWIDGET_H
#define ACTIONTABLEWIDGET_H
#include <Editor/ErrorDialog/ErrorDialog.h>
#include <Editor/UniversalDelegate/UniversalDelegate.h>
#include <Engine/Core/Numerical/Numerical.h>
#include <Engine/Core/Trigger/Trigger.h>
class ActionTableWidget: public QTableWidget
{
	Q_OBJECT
	public: class ItemAction: public QTableWidgetItem
	{
		public: ItemAction(void)
		{}
	};
	private: class Token
	{
		public: QString value;
		public: int position;
		public: QString previousOperation;
		public: Token(QString _value, QString _previousOperation, int _position)
		{
			value = _value;
			previousOperation = _previousOperation;
			position = _position;
		}
		public: bool IsLastOperation(QString _operation)
		{
			if(previousOperation == _operation)
			{
				return true;
			}
			return false;
		}
	};
	public: enum
	{
		MAX_ROWS = 10,
		MAX_COLUMNS = 4
	};
	public: enum
	{
		TYPE_PROPERTY = 0,
		TARGET_PROPERTY,
		ARG1_PROPERTY,
		ARG2_PROPERTY,
		ARG3_PROPERTY,
		ARG4_PROPERTY,
		ARG5_PROPERTY,
		NAME_PROPERTY,
		ACTIVATION_LIMIT_PROPERTY,
		ARGS_LOADING_MODE_PROPERTY
	};
	public: enum
	{
		VALUE = 0,
		CONTENT,
		DATA_TYPE,
		ARG_MODE
	};
	private: bool autoName;
	private: UniversalDelegate* delegate;

	private: QList<QString> createVariableArgsComboList;
	private: QList<QString> changeValueRangeArgsComboList;
	private: QList<QString> changeVectorArgsComboList;
	private: QList<QString> getRotationFromToArgsComboList;
	private: QList<QString> createListArgsComboList;
	private: QList<QString> vectorLerpArgsComboList;
    private: QList<QString> quaternionLerpArgsComboList;
	private: QList<QString> floatLerpArgsComboList1;
    private: QList<QString> colorTypeArgsComboList;
	private: QList<QString> colorComponentArgsComboList;
	private: QList<QString> floatLerpArgsComboList2;
	private: QList<QString> checkCollisionArgsComboList;
	private: QList<QString> swapItemsArgsComboList;
	private: QList<QString> removeItemArgsComboList;
	private: QList<QString> randomValueArgsComboList;
    private: QList<QString> argMode_KEY_VARIABLE_TEMPLATE_ComboList;
	private: QList<QString> argMode_KEY_VARIABLE_EXPRESSION_TEMPLATE_ComboList;
    private: QList<QString> argMode_VARIABLE_EQUALITY_ComboList;
    private: QList<QString> argMode_VARIABLE_TEMPLATE_ComboList;
    private: QList<QString> argMode_VARIABLE_EXPRESSION_ComboList;

	private: bool propertyValid[MAX_ROWS];
	private: bool propertyEnabled[MAX_ROWS];
	public: ActionTableWidget(QWidget* _parent = 0);
	public: virtual ~ActionTableWidget(void);
	private: void CreateConstantsForComboBox(void);
	public: void SetCellDelegate(int _row, int _editor);
	private: void CreateDictionary(void);
	private: QString GetFirstName(void);
	private: QString GetLastName(QString _type);
	public: void SetAutoName(bool _enable);
	private: bool IsAutoNameEnabled(int _row, int _column);
	public: bool IsAutoNameEnabled(void)const;
	private: void CreateAutoName(const QModelIndex& _index);
	public: int32 GetVariableType(QString _variableType);
	public: int32 GetListType(QString _listType);
	public: void SetDefaultState(void);
	public: void SetDefaultProperty(int _index);
	public: void SetCellText(int _row, int _column, QString _value);
	public: QString GetCellText(int _row, int _column);
	public: void SetPropertyEnable(int _row, bool _enable);
	public: void SetPropertyValid(int _row, bool _valid);
	public: bool IsPropertyValid(int _row);
	public: bool IsValid(void)const;
	public: void UpdateStatus(void);
	private: bool IsEnumerationExprCompute(QString _text);
	private: bool IsStringExprCompute(QString _text);
	private: bool IsBooleanExprCompute(QString _text);
	private: bool IsEqualityExprCompute(QString _text);
	private: bool IsArithmeticExprCompute(QString _text, int32 _variableType);
	private: void UpdateNamePropertyStatus(void);
	private: void UpdateTypePropertyStatus(void);
	private: void UpdateArg1PropertyStatus(void);
	private: void UpdateArg1KeyPropertyStatus(void);
	private: void UpdateArg1VariablePropertyStatus(void);
	private: void UpdateArg1TemplatePropertyStatus(void);
	private: void UpdateArg1ExpressionPropertyStatus(void);
	private: void UpdateArg1EqualityPropertyStatus(void);
	private: void UpdateArg2PropertyStatus(void);
	private: void UpdateArg2KeyPropertyStatus(void);
	private: void UpdateArg2VariablePropertyStatus(void);
	private: void UpdateArg2TemplatePropertyStatus(void);
	private: void UpdateArg2ExpressionPropertyStatus(void);
	private: void UpdateArg3PropertyStatus(void);
	private: void UpdateArg3KeyPropertyStatus(void);
	private: void UpdateArg3VariablePropertyStatus(void);
	private: void UpdateArg3ExpressionPropertyStatus(void);
	private: void UpdateArg3TemplatePropertyStatus(void);
	private: void UpdateArg4PropertyStatus(void);
	private: void UpdateArg4KeyPropertyStatus(void);
	private: void UpdateArg4VariablePropertyStatus(void);
	private: void UpdateArg4TemplatePropertyStatus(void);
	private: void UpdateArg5PropertyStatus(void);
	private: void UpdateArg5KeyPropertyStatus(void);
	private: void UpdateArg5VariablePropertyStatus(void);
	private: void UpdateArg5TemplatePropertyStatus(void);
	private: void UpdateTargetPropertyStatus(void);
	private: void UpdateTargetVariablePropertyStatus(void);
	private: void UpdateTargetTemplatePropertyStatus(void);
	private: void UpdateAbstractAnimation(int _argIndex);
	private: void UpdateTexturedAnimation(int _argIndex);
	private: void UpdateTexture(int _argIndex);
	private: void UpdateAtlas(int _argIndex);
	private: void UpdateMesh(int _argIndex);
	private: void UpdateHitbox(int _argIndex);
	private: void UpdatePlayerControl(int _argIndex);
	private: void UpdateTranslatableObject(int _argIndex);
	private: void UpdateActivatableObject(int _argIndex);
	private: void UpdateRotatableObject(int _argIndex);
	private: void UpdateScalableObject(int _argIndex);
	private: void UpdateColorableObject(int _argIndex);
	private: void UpdateLerpingObject(int _argIndex);
	private: void UpdateLogicObject(int _argIndex);
	private: void UpdateGraphicsObject(int _argIndex);
	private: void UpdatePlayingObject(int _argIndex);
	private: void UpdateAnyAsset(int _argIndex);
	private: void UpdateName(int _argIndex);
	private: void UpdateVariable(int _argIndex, int32 _variableType);
	private: void UpdateList(int _argIndex, int32 _listType);
	private: void UpdateAbstractList(int _argIndex);
	private: void UpdateAbstractVariable(int _argIndex);
	private: void UpdateObject(int _argIndex);
	private: void UpdateScene(int _argIndex);
	private: void UpdateFloatLerp(int _argIndex);
	private: void UpdateQuaternionLerp(int _argIndex);
	private: void UpdateVectorLerp(int _argIndex);
	private: void UpdateCamera(int _argIndex);
	private: void UpdateAction(int _argIndex);
	private: void UpdateEqualityExpr(int _argIndex);
	private: void UpdateBooleanExpr(int _argIndex);
	private: void UpdateEnumerationExpr(int _argIndex);
	private: void UpdateStringExpr(int _argIndex);
	private: void UpdateArithmeticExpr(int _argIndex, int32 _variableType);
	public: bool IsEnabled(int _row)const;
	private slots: void CellIsClicked(int _row, int _column);
	protected: virtual void keyPressEvent(QKeyEvent* _event);
	protected: virtual void mouseDoubleClickEvent(QMouseEvent* _event);
	private: void UpdateItem(QString _actionType, QTableWidgetItem* _it, int _row);
	private: int GetEditorTypeForCell(QString _actionType, ItemAction* _it);
	private slots: void UpdateRow(QTableWidgetItem* _it);
	protected: virtual void dragEnterEvent(QDragEnterEvent *_event);
	protected: virtual void dropEvent(QDropEvent *_event);
	protected: virtual void dragMoveEvent(QDragMoveEvent* _event);
	private: void AbstractAnimationDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void TexturedAnimationDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void TextureDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void AtlasDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void MeshDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void HitboxDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void PlayerControlDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void TranslatableObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void ActivatableObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void ScalableObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void RotatableObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void ColorableObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void LerpingObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void LogicObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void GraphicsObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void PlayingObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void ListDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName, int32 _listType);
	private: void AbstractListDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void AbstractVariableDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void ObjectDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void SceneDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void AnyAssetDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void FloatLerpDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void QuaternionLerpDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void VectorLerpDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void CameraDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void ActionDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: void VariableDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName, int32 _variableType);
	public: bool IsEmpty(QString _expr);
	private: void StringExprDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	public: bool StringOperationIsLast(QString _expr);
	private: void EnumerationExprDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	public: bool EnumerationOperationIsLast(QString _expr);
	private: void BooleanExprDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	public: bool BooleanOperationIsLast(QString _expr);
	private: void EqualityExprDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	public: bool EqualityOperationIsLast(QString _expr);
	private: void ArithmeticExprDropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName, QString _variableType);
	public: bool ArithmeticOperationIsLast(QString _expr);
	private: void CHANGE_NAME_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_NAME_UpdateArg1KeyPropertyStatus(void);
	private: bool CHANGE_NAME_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_NAME_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_NAME_CreateAutoName(void);
	private: bool CHANGE_NAME_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_NAME_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_TIMER_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_TIMER_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_TIMER_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_TIMER_CreateAutoName(void);
	private: bool CREATE_TIMER_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_TIMER_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_CAMERA_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_CAMERA_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_CAMERA_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_CAMERA_CreateAutoName(void);
	private: bool CREATE_CAMERA_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_CAMERA_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_MESH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_MESH_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_MESH_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_MESH_CreateAutoName(void);
	private: bool CREATE_MESH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_MESH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_SET_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_SET_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_SET_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_SET_CreateAutoName(void);
	private: bool CREATE_SET_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_SET_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_TEXTURED_ANIMATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_TEXTURED_ANIMATION_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_TEXTURED_ANIMATION_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_TEXTURED_ANIMATION_CreateAutoName(void);
	private: bool CREATE_TEXTURED_ANIMATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_TEXTURED_ANIMATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_TEXTURE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_TEXTURE_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_TEXTURE_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_TEXTURE_CreateAutoName(void);
	private: bool CREATE_TEXTURE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_TEXTURE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_TILED_SPACE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_TILED_SPACE_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_TILED_SPACE_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_TILED_SPACE_CreateAutoName(void);
	private: bool CREATE_TILED_SPACE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_TILED_SPACE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_SYSTEM_TIME_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_SYSTEM_TIME_UpdateArg1VariablePropertyStatus(void);
	private: QString GET_SYSTEM_TIME_CreateAutoName(void);
	private: bool GET_SYSTEM_TIME_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_SYSTEM_TIME_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_TRIGGER_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_TRIGGER_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_TRIGGER_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_TRIGGER_UpdateArg2KeyPropertyStatus(void);
	private: bool CREATE_TRIGGER_UpdateArg2VariablePropertyStatus(void);
	private: bool CREATE_TRIGGER_UpdateArg3KeyPropertyStatus(void);
	private: bool CREATE_TRIGGER_UpdateArg3VariablePropertyStatus(void);
	private: QString CREATE_TRIGGER_CreateAutoName(void);
	private: bool CREATE_TRIGGER_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_TRIGGER_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_VALUE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_VALUE_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_VALUE_UpdateArg2PropertyStatus(void);
	private: bool CHANGE_VALUE_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_VALUE_UpdateArg2ExpressionPropertyStatus(void);
	private: bool CHANGE_VALUE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_VALUE_CreateAutoName(void);
	private: bool CHANGE_VALUE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_VALUE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void LOAD_ASSET_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool LOAD_ASSET_UpdateArg1KeyPropertyStatus(void);
	private: bool LOAD_ASSET_UpdateArg1VariablePropertyStatus(void);
	private: bool LOAD_ASSET_UpdateArg2VariablePropertyStatus(void);
	private: QString LOAD_ASSET_CreateAutoName(void);
	private: bool LOAD_ASSET_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void LOAD_ASSET_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_NAME_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_NAME_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_NAME_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_NAME_CreateAutoName(void);
	private: bool GET_NAME_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_NAME_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_OBJECT_EXIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_OBJECT_EXIST_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_OBJECT_EXIST_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_OBJECT_EXIST_CreateAutoName(void);
	private: bool CHECK_OBJECT_EXIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_OBJECT_EXIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_PROPERTY_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_PROPERTY_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_PROPERTY_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_PROPERTY_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_PROPERTY_CreateAutoName(void);
	private: bool CHECK_PROPERTY_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_PROPERTY_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_LIST_EMPTY_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_LIST_EMPTY_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_LIST_EMPTY_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_LIST_EMPTY_CreateAutoName(void);
	private: bool CHECK_LIST_EMPTY_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_LIST_EMPTY_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SEND_MESSAGE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SEND_MESSAGE_UpdateArg1VariablePropertyStatus(void);
	private: bool SEND_MESSAGE_UpdateTargetVariablePropertyStatus(void);
	private: QString SEND_MESSAGE_CreateAutoName(void);
	private: bool SEND_MESSAGE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SEND_MESSAGE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void DESTROY_OBJECT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool DESTROY_OBJECT_UpdateTargetVariablePropertyStatus(void);
	private: QString DESTROY_OBJECT_CreateAutoName(void);
	private: bool DESTROY_OBJECT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void DESTROY_OBJECT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SAVE_TO_FILE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SAVE_TO_FILE_UpdateTargetVariablePropertyStatus(void);
	private: QString SAVE_TO_FILE_CreateAutoName(void);
	private: bool SAVE_TO_FILE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SAVE_TO_FILE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_PRIVATE_ASSET_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_PRIVATE_ASSET_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_PRIVATE_ASSET_CreateAutoName(void);
	private: bool SET_PRIVATE_ASSET_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_PRIVATE_ASSET_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ANIMATION_FRAME_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ANIMATION_FRAME_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ANIMATION_FRAME_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ANIMATION_FRAME_CreateAutoName(void);
	private: bool CHANGE_ANIMATION_FRAME_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ANIMATION_FRAME_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void RESIZE_SET_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool RESIZE_SET_UpdateArg1VariablePropertyStatus(void);
	private: bool RESIZE_SET_UpdateTargetVariablePropertyStatus(void);
	private: QString RESIZE_SET_CreateAutoName(void);
	private: bool RESIZE_SET_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void RESIZE_SET_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ACTIVATION_LIMIT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ACTIVATION_LIMIT_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ACTIVATION_LIMIT_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ACTIVATION_LIMIT_CreateAutoName(void);
	private: bool CHANGE_ACTIVATION_LIMIT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ACTIVATION_LIMIT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_DEACTIVATION_MODE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_DEACTIVATION_MODE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_DEACTIVATION_MODE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_DEACTIVATION_MODE_CreateAutoName(void);
	private: bool CHANGE_DEACTIVATION_MODE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_DEACTIVATION_MODE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_EMPTY_TILE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_EMPTY_TILE_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_EMPTY_TILE_UpdateTargetVariablePropertyStatus(void);
	private: QString CREATE_EMPTY_TILE_CreateAutoName(void);
	private: bool CREATE_EMPTY_TILE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_EMPTY_TILE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REMOVE_BRUSH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REMOVE_BRUSH_UpdateArg1VariablePropertyStatus(void);
	private: bool REMOVE_BRUSH_UpdateTargetVariablePropertyStatus(void);
	private: QString REMOVE_BRUSH_CreateAutoName(void);
	private: bool REMOVE_BRUSH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REMOVE_BRUSH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_AMOUNT_OF_FRAMES_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_AMOUNT_OF_FRAMES_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_AMOUNT_OF_FRAMES_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_AMOUNT_OF_FRAMES_CreateAutoName(void);
	private: bool GET_AMOUNT_OF_FRAMES_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_AMOUNT_OF_FRAMES_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_FRAME_SIZE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_FRAME_SIZE_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_FRAME_SIZE_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_FRAME_SIZE_CreateAutoName(void);
	private: bool GET_FRAME_SIZE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_FRAME_SIZE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ATLAS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ATLAS_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ATLAS_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ATLAS_CreateAutoName(void);
	private: bool CHANGE_ATLAS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ATLAS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_TEXTURE_SIZE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_TEXTURE_SIZE_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_TEXTURE_SIZE_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_TEXTURE_SIZE_CreateAutoName(void);
	private: bool GET_TEXTURE_SIZE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_TEXTURE_SIZE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_RANDOM_SEED_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_RANDOM_SEED_UpdateArg1KeyPropertyStatus(void);
	private: bool CHANGE_RANDOM_SEED_UpdateArg1VariablePropertyStatus(void);
	private: QString CHANGE_RANDOM_SEED_CreateAutoName(void);
	private: bool CHANGE_RANDOM_SEED_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_RANDOM_SEED_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ITEM_VALUE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ITEM_VALUE_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_ITEM_VALUE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ITEM_VALUE_UpdateArg2PropertyStatus(void);
	private: bool CHANGE_ITEM_VALUE_UpdateArg3PropertyStatus(void);
	private: bool CHANGE_ITEM_VALUE_UpdateArg3VariablePropertyStatus(void);
	private: bool CHANGE_ITEM_VALUE_UpdateArg3ExpressionPropertyStatus(void);
	private: bool CHANGE_ITEM_VALUE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ITEM_VALUE_CreateAutoName(void);
	private: bool CHANGE_ITEM_VALUE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ITEM_VALUE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_LIST_VALUE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_LIST_VALUE_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_LIST_VALUE_UpdateArg2PropertyStatus(void);
	private: bool CHANGE_LIST_VALUE_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_LIST_VALUE_UpdateArg2TemplatePropertyStatus(void);
	private: bool CHANGE_LIST_VALUE_UpdateArg2ExpressionPropertyStatus(void);
	private: bool CHANGE_LIST_VALUE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_LIST_VALUE_CreateAutoName(void);
	private: bool CHANGE_LIST_VALUE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_LIST_VALUE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_ROTATION_RANGE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_ROTATION_RANGE_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_ROTATION_RANGE_UpdateArg2VariablePropertyStatus(void);
	private: bool ENABLE_ROTATION_RANGE_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_ROTATION_RANGE_CreateAutoName(void);
	private: bool ENABLE_ROTATION_RANGE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_ROTATION_RANGE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ADD_TO_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ADD_TO_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool ADD_TO_LIST_UpdateArg2VariablePropertyStatus(void);
	private: bool ADD_TO_LIST_UpdateArg3VariablePropertyStatus(void);
	private: bool ADD_TO_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString ADD_TO_LIST_CreateAutoName(void);
	private: bool ADD_TO_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ADD_TO_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void TILED_SPACE_FILL_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool TILED_SPACE_FILL_UpdateArg1VariablePropertyStatus(void);
	private: bool TILED_SPACE_FILL_UpdateArg2VariablePropertyStatus(void);
	private: bool TILED_SPACE_FILL_UpdateArg3VariablePropertyStatus(void);
	private: bool TILED_SPACE_FILL_UpdateTargetVariablePropertyStatus(void);
	private: QString TILED_SPACE_FILL_CreateAutoName(void);
	private: bool TILED_SPACE_FILL_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void TILED_SPACE_FILL_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ROTATION_RANGE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ROTATION_RANGE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ROTATION_RANGE_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_ROTATION_RANGE_UpdateArg3VariablePropertyStatus(void);
	private: bool CHANGE_ROTATION_RANGE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ROTATION_RANGE_CreateAutoName(void);
	private: bool CHANGE_ROTATION_RANGE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ROTATION_RANGE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ADD_INPUT_EVENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ADD_INPUT_EVENT_UpdateArg1VariablePropertyStatus(void);
	private: bool ADD_INPUT_EVENT_UpdateArg2VariablePropertyStatus(void);
	private: bool ADD_INPUT_EVENT_UpdateArg3VariablePropertyStatus(void);
	private: bool ADD_INPUT_EVENT_UpdateTargetVariablePropertyStatus(void);
	private: QString ADD_INPUT_EVENT_CreateAutoName(void);
	private: bool ADD_INPUT_EVENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ADD_INPUT_EVENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_ONE_INPUT_EVENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_ONE_INPUT_EVENT_UpdateArg1VariablePropertyStatus(void);
	private: bool SET_ONE_INPUT_EVENT_UpdateArg2VariablePropertyStatus(void);
	private: bool SET_ONE_INPUT_EVENT_UpdateArg3VariablePropertyStatus(void);
	private: bool SET_ONE_INPUT_EVENT_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_ONE_INPUT_EVENT_CreateAutoName(void);
	private: bool SET_ONE_INPUT_EVENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_ONE_INPUT_EVENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_DATA_FROM_ITEM_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_DATA_FROM_ITEM_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_DATA_FROM_ITEM_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_DATA_FROM_ITEM_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_DATA_FROM_ITEM_CreateAutoName(void);
	private: bool GET_DATA_FROM_ITEM_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_DATA_FROM_ITEM_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_ITEM_INDEX_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_ITEM_INDEX_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_ITEM_INDEX_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_ITEM_INDEX_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_ITEM_INDEX_CreateAutoName(void);
	private: bool GET_ITEM_INDEX_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_ITEM_INDEX_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_DATA_FROM_SLOT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_DATA_FROM_SLOT_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_DATA_FROM_SLOT_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_DATA_FROM_SLOT_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_DATA_FROM_SLOT_CreateAutoName(void);
	private: bool GET_DATA_FROM_SLOT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_DATA_FROM_SLOT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_DATA_TO_SLOT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_DATA_TO_SLOT_UpdateArg1VariablePropertyStatus(void);
	private: bool SET_DATA_TO_SLOT_UpdateArg2VariablePropertyStatus(void);
	private: bool SET_DATA_TO_SLOT_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_DATA_TO_SLOT_CreateAutoName(void);
	private: bool SET_DATA_TO_SLOT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_DATA_TO_SLOT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void RANDOMIZE_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool RANDOMIZE_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool RANDOMIZE_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString RANDOMIZE_LIST_CreateAutoName(void);
	private: bool RANDOMIZE_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void RANDOMIZE_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_AMOUNT_OF_ITEMS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_AMOUNT_OF_ITEMS_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_AMOUNT_OF_ITEMS_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_AMOUNT_OF_ITEMS_CreateAutoName(void);
	private: bool GET_AMOUNT_OF_ITEMS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_AMOUNT_OF_ITEMS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_AMOUNT_OF_SLOTS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_AMOUNT_OF_SLOTS_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_AMOUNT_OF_SLOTS_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_AMOUNT_OF_SLOTS_CreateAutoName(void);
	private: bool GET_AMOUNT_OF_SLOTS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_AMOUNT_OF_SLOTS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void COPY_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool COPY_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool COPY_LIST_UpdateArg2VariablePropertyStatus(void);
	private: bool COPY_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString COPY_LIST_CreateAutoName(void);
	private: bool COPY_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void COPY_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CLEAR_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CLEAR_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool CLEAR_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString CLEAR_LIST_CreateAutoName(void);
	private: bool CLEAR_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CLEAR_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CLEAR_INPUT_EVENTS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CLEAR_INPUT_EVENTS_UpdateTargetVariablePropertyStatus(void);
	private: QString CLEAR_INPUT_EVENTS_CreateAutoName(void);
	private: bool CLEAR_INPUT_EVENTS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CLEAR_INPUT_EVENTS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REPLAY_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REPLAY_UpdateTargetVariablePropertyStatus(void);
	private: QString REPLAY_CreateAutoName(void);
	private: bool REPLAY_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REPLAY_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_LIST_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_LIST_UpdateArg2VariablePropertyStatus(void);
	private: QString CREATE_LIST_CreateAutoName(void);
	private: bool CREATE_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_VARIABLE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_VARIABLE_UpdateArg1PropertyStatus(void);
	private: bool CREATE_VARIABLE_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_VARIABLE_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_VARIABLE_UpdateArg2PropertyStatus(void);
	private: bool CREATE_VARIABLE_UpdateArg3PropertyStatus(void);
	private: bool CREATE_VARIABLE_UpdateArg3VariablePropertyStatus(void);
	private: bool CREATE_VARIABLE_UpdateArg3ExpressionPropertyStatus(void);
	private: bool CREATE_VARIABLE_UpdateArg3TemplatePropertyStatus(void);
	private: QString CREATE_VARIABLE_CreateAutoName(void);
	private: bool CREATE_VARIABLE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_VARIABLE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_BACKGROUND_COLOR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_BACKGROUND_COLOR_UpdateArg1VariablePropertyStatus(void);
	private: QString CHANGE_BACKGROUND_COLOR_CreateAutoName(void);
	private: bool CHANGE_BACKGROUND_COLOR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_BACKGROUND_COLOR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_SCALE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_SCALE_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_SCALE_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_SCALE_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_SCALE_CreateAutoName(void);
	private: bool GET_SCALE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_SCALE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void DISPLACE_SCALE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool DISPLACE_SCALE_UpdateArg1VariablePropertyStatus(void);
	private: bool DISPLACE_SCALE_UpdateTargetVariablePropertyStatus(void);
	private: QString DISPLACE_SCALE_CreateAutoName(void);
	private: bool DISPLACE_SCALE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void DISPLACE_SCALE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REPLACE_SCALE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REPLACE_SCALE_UpdateArg1VariablePropertyStatus(void);
	private: bool REPLACE_SCALE_UpdateTargetVariablePropertyStatus(void);
	private: QString REPLACE_SCALE_CreateAutoName(void);
	private: bool REPLACE_SCALE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REPLACE_SCALE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_POSITION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_POSITION_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_POSITION_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_POSITION_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_POSITION_CreateAutoName(void);
	private: bool GET_POSITION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_POSITION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REPLACE_POSITION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REPLACE_POSITION_UpdateArg1VariablePropertyStatus(void);
	private: bool REPLACE_POSITION_UpdateTargetVariablePropertyStatus(void);
	private: QString REPLACE_POSITION_CreateAutoName(void);
	private: bool REPLACE_POSITION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REPLACE_POSITION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void DISPLACE_POSITION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool DISPLACE_POSITION_UpdateArg1VariablePropertyStatus(void);
	private: bool DISPLACE_POSITION_UpdateTargetVariablePropertyStatus(void);
	private: QString DISPLACE_POSITION_CreateAutoName(void);
	private: bool DISPLACE_POSITION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void DISPLACE_POSITION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_ROTATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_ROTATION_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_ROTATION_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_ROTATION_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_ROTATION_CreateAutoName(void);
	private: bool GET_ROTATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_ROTATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REPLACE_ROTATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REPLACE_ROTATION_UpdateArg1VariablePropertyStatus(void);
	private: bool REPLACE_ROTATION_UpdateTargetVariablePropertyStatus(void);
	private: QString REPLACE_ROTATION_CreateAutoName(void);
	private: bool REPLACE_ROTATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REPLACE_ROTATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void DISPLACE_ROTATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool DISPLACE_ROTATION_UpdateArg1VariablePropertyStatus(void);
	private: bool DISPLACE_ROTATION_UpdateTargetVariablePropertyStatus(void);
	private: QString DISPLACE_ROTATION_CreateAutoName(void);
	private: bool DISPLACE_ROTATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void DISPLACE_ROTATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_PLANE_NORMAL_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_PLANE_NORMAL_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_PLANE_NORMAL_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_PLANE_NORMAL_CreateAutoName(void);
	private: bool CHANGE_PLANE_NORMAL_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_PLANE_NORMAL_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_MESH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_MESH_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_MESH_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_MESH_CreateAutoName(void);
	private: bool CHANGE_MESH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_MESH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_QUAD_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_QUAD_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_QUAD_UpdateTargetVariablePropertyStatus(void);
	private: QString CREATE_QUAD_CreateAutoName(void);
	private: bool CREATE_QUAD_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_QUAD_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_BOX_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_BOX_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_BOX_UpdateTargetVariablePropertyStatus(void);
	private: QString CREATE_BOX_CreateAutoName(void);
	private: bool CREATE_BOX_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_BOX_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_INTERSECTION_MODE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_INTERSECTION_MODE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_INTERSECTION_MODE_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_INTERSECTION_MODE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_INTERSECTION_MODE_CreateAutoName(void);
	private: bool CHANGE_INTERSECTION_MODE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_INTERSECTION_MODE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_PROPERTY_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_PROPERTY_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_PROPERTY_UpdateArg2VariablePropertyStatus(void);
	private: bool ENABLE_PROPERTY_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_PROPERTY_CreateAutoName(void);
	private: bool ENABLE_PROPERTY_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_PROPERTY_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_BACK_FACE_CULLING_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_BACK_FACE_CULLING_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_BACK_FACE_CULLING_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_BACK_FACE_CULLING_CreateAutoName(void);
	private: bool ENABLE_BACK_FACE_CULLING_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_BACK_FACE_CULLING_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_POSITION_OFFSET_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_POSITION_OFFSET_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_POSITION_OFFSET_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_POSITION_OFFSET_CreateAutoName(void);
	private: bool ENABLE_POSITION_OFFSET_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_POSITION_OFFSET_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_ZOOM_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_ZOOM_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_ZOOM_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_ZOOM_CreateAutoName(void);
	private: bool ENABLE_ZOOM_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_ZOOM_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_ROTATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_ROTATION_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_ROTATION_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_ROTATION_CreateAutoName(void);
	private: bool ENABLE_ROTATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_ROTATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_FRONT_TEXTURE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_FRONT_TEXTURE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_FRONT_TEXTURE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_FRONT_TEXTURE_CreateAutoName(void);
	private: bool CHANGE_FRONT_TEXTURE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_FRONT_TEXTURE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_BACK_TEXTURE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_BACK_TEXTURE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_BACK_TEXTURE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_BACK_TEXTURE_CreateAutoName(void);
	private: bool CHANGE_BACK_TEXTURE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_BACK_TEXTURE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_FRONT_TEXTURED_ANIMATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_FRONT_TEXTURED_ANIMATION_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_FRONT_TEXTURED_ANIMATION_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_FRONT_TEXTURED_ANIMATION_CreateAutoName(void);
	private: bool CHANGE_FRONT_TEXTURED_ANIMATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_FRONT_TEXTURED_ANIMATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_BACK_TEXTURED_ANIMATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_BACK_TEXTURED_ANIMATION_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_BACK_TEXTURED_ANIMATION_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_BACK_TEXTURED_ANIMATION_CreateAutoName(void);
	private: bool CHANGE_BACK_TEXTURED_ANIMATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_BACK_TEXTURED_ANIMATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_SHOW_CURSOR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_SHOW_CURSOR_UpdateArg1VariablePropertyStatus(void);
	private: QString ENABLE_SHOW_CURSOR_CreateAutoName(void);
	private: bool ENABLE_SHOW_CURSOR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_SHOW_CURSOR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_Z_BUFFER_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_Z_BUFFER_UpdateArg1VariablePropertyStatus(void);
	private: QString ENABLE_Z_BUFFER_CreateAutoName(void);
	private: bool ENABLE_Z_BUFFER_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_Z_BUFFER_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_TRIGGERS_BLOCK_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_TRIGGERS_BLOCK_UpdateArg1VariablePropertyStatus(void);
	private: QString ENABLE_TRIGGERS_BLOCK_CreateAutoName(void);
	private: bool ENABLE_TRIGGERS_BLOCK_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_TRIGGERS_BLOCK_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_KEYBOARD_EVENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_KEYBOARD_EVENT_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_KEYBOARD_EVENT_UpdateArg2VariablePropertyStatus(void);
	private: QString CREATE_KEYBOARD_EVENT_CreateAutoName(void);
	private: bool CREATE_KEYBOARD_EVENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_KEYBOARD_EVENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void PICK_SCENE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool PICK_SCENE_UpdateTargetVariablePropertyStatus(void);
	private: QString PICK_SCENE_CreateAutoName(void);
	private: bool PICK_SCENE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void PICK_SCENE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ADD_TO_LAYER_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ADD_TO_LAYER_UpdateArg1VariablePropertyStatus(void);
	private: bool ADD_TO_LAYER_UpdateTargetVariablePropertyStatus(void);
	private: QString ADD_TO_LAYER_CreateAutoName(void);
	private: bool ADD_TO_LAYER_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ADD_TO_LAYER_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REMOVE_FROM_LAYER_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REMOVE_FROM_LAYER_UpdateArg1VariablePropertyStatus(void);
	private: bool REMOVE_FROM_LAYER_UpdateTargetVariablePropertyStatus(void);
	private: QString REMOVE_FROM_LAYER_CreateAutoName(void);
	private: bool REMOVE_FROM_LAYER_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REMOVE_FROM_LAYER_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ADD_TO_UPDATE_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ADD_TO_UPDATE_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool ADD_TO_UPDATE_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString ADD_TO_UPDATE_LIST_CreateAutoName(void);
	private: bool ADD_TO_UPDATE_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ADD_TO_UPDATE_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REMOVE_FROM_UPDATE_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REMOVE_FROM_UPDATE_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool REMOVE_FROM_UPDATE_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString REMOVE_FROM_UPDATE_LIST_CreateAutoName(void);
	private: bool REMOVE_FROM_UPDATE_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REMOVE_FROM_UPDATE_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ADD_TO_RENDER_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ADD_TO_RENDER_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool ADD_TO_RENDER_LIST_UpdateArg2VariablePropertyStatus(void);
	private: bool ADD_TO_RENDER_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString ADD_TO_RENDER_LIST_CreateAutoName(void);
	private: bool ADD_TO_RENDER_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ADD_TO_RENDER_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REMOVE_FROM_RENDER_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REMOVE_FROM_RENDER_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool REMOVE_FROM_RENDER_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString REMOVE_FROM_RENDER_LIST_CreateAutoName(void);
	private: bool REMOVE_FROM_RENDER_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REMOVE_FROM_RENDER_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void PICK_CAMERA_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool PICK_CAMERA_UpdateTargetVariablePropertyStatus(void);
	private: QString PICK_CAMERA_CreateAutoName(void);
	private: bool PICK_CAMERA_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void PICK_CAMERA_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void INVERSE_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool INVERSE_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString INVERSE_LIST_CreateAutoName(void);
	private: bool INVERSE_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void INVERSE_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_CAMERA_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_CAMERA_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_CAMERA_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_CAMERA_CreateAutoName(void);
	private: bool CHANGE_CAMERA_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_CAMERA_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_RENDER_TARGET_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_RENDER_TARGET_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_RENDER_TARGET_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_RENDER_TARGET_CreateAutoName(void);
	private: bool CHANGE_RENDER_TARGET_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_RENDER_TARGET_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_FLOAT_LERP_MODE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_FLOAT_LERP_MODE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_FLOAT_LERP_MODE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_FLOAT_LERP_MODE_CreateAutoName(void);
	private: bool CHANGE_FLOAT_LERP_MODE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_FLOAT_LERP_MODE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_PROJECTION_MODE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_PROJECTION_MODE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_PROJECTION_MODE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_PROJECTION_MODE_CreateAutoName(void);
	private: bool CHANGE_PROJECTION_MODE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_PROJECTION_MODE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_MOVEMENT_MODE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_MOVEMENT_MODE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_MOVEMENT_MODE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_MOVEMENT_MODE_CreateAutoName(void);
	private: bool CHANGE_MOVEMENT_MODE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_MOVEMENT_MODE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ROTATION_MODE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ROTATION_MODE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ROTATION_MODE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ROTATION_MODE_CreateAutoName(void);
	private: bool CHANGE_ROTATION_MODE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ROTATION_MODE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_SELECT_RAY_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_SELECT_RAY_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_SELECT_RAY_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_SELECT_RAY_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_SELECT_RAY_CreateAutoName(void);
	private: bool GET_SELECT_RAY_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_SELECT_RAY_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_FLOAT_LERP_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_FLOAT_LERP_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_FLOAT_LERP_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_FLOAT_LERP_CreateAutoName(void);
	private: bool CREATE_FLOAT_LERP_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_FLOAT_LERP_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_PLAYER_CONTROL_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_PLAYER_CONTROL_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_PLAYER_CONTROL_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_PLAYER_CONTROL_CreateAutoName(void);
	private: bool CREATE_PLAYER_CONTROL_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_PLAYER_CONTROL_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_QUATERNION_LERP_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_QUATERNION_LERP_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_QUATERNION_LERP_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_QUATERNION_LERP_CreateAutoName(void);
	private: bool CREATE_QUATERNION_LERP_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_QUATERNION_LERP_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_VECTOR_LERP_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_VECTOR_LERP_UpdateArg1KeyPropertyStatus(void);
	private: bool CREATE_VECTOR_LERP_UpdateArg1VariablePropertyStatus(void);
	private: QString CREATE_VECTOR_LERP_CreateAutoName(void);
	private: bool CREATE_VECTOR_LERP_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_VECTOR_LERP_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_FLOAT_LERP_SPEED_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_FLOAT_LERP_SPEED_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_FLOAT_LERP_SPEED_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_FLOAT_LERP_SPEED_CreateAutoName(void);
	private: bool CHANGE_FLOAT_LERP_SPEED_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_FLOAT_LERP_SPEED_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void STREAMING_FLOAT_CURRENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool STREAMING_FLOAT_CURRENT_UpdateArg1VariablePropertyStatus(void);
	private: bool STREAMING_FLOAT_CURRENT_UpdateArg2VariablePropertyStatus(void);
	private: bool STREAMING_FLOAT_CURRENT_UpdateTargetVariablePropertyStatus(void);
	private: QString STREAMING_FLOAT_CURRENT_CreateAutoName(void);
	private: bool STREAMING_FLOAT_CURRENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void STREAMING_FLOAT_CURRENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_FLOAT_LERP_TARGET_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_FLOAT_LERP_TARGET_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_FLOAT_LERP_TARGET_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_FLOAT_LERP_TARGET_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_FLOAT_LERP_TARGET_CreateAutoName(void);
	private: bool CHANGE_FLOAT_LERP_TARGET_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_FLOAT_LERP_TARGET_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void STREAMING_FLOAT_DELTA_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool STREAMING_FLOAT_DELTA_UpdateArg1VariablePropertyStatus(void);
	private: bool STREAMING_FLOAT_DELTA_UpdateArg2VariablePropertyStatus(void);
	private: bool STREAMING_FLOAT_DELTA_UpdateArg3VariablePropertyStatus(void);
	private: bool STREAMING_FLOAT_DELTA_UpdateTargetVariablePropertyStatus(void);
	private: QString STREAMING_FLOAT_DELTA_CreateAutoName(void);
	private: bool STREAMING_FLOAT_DELTA_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void STREAMING_FLOAT_DELTA_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_VECTOR_LERP_MODE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_VECTOR_LERP_MODE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_VECTOR_LERP_MODE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_VECTOR_LERP_MODE_CreateAutoName(void);
	private: bool CHANGE_VECTOR_LERP_MODE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_VECTOR_LERP_MODE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_FLOAT_LERP_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_FLOAT_LERP_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_FLOAT_LERP_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_FLOAT_LERP_CreateAutoName(void);
	private: bool CHANGE_FLOAT_LERP_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_FLOAT_LERP_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_PLAYING_MODE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_PLAYING_MODE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_PLAYING_MODE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_PLAYING_MODE_CreateAutoName(void);
	private: bool CHANGE_PLAYING_MODE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_PLAYING_MODE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_PLAYING_STATE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_PLAYING_STATE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_PLAYING_STATE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_PLAYING_STATE_CreateAutoName(void);
	private: bool CHANGE_PLAYING_STATE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_PLAYING_STATE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_PLAYING_DURATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_PLAYING_DURATION_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_PLAYING_DURATION_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_PLAYING_DURATION_CreateAutoName(void);
	private: bool CHANGE_PLAYING_DURATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_PLAYING_DURATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_INPUT_TIMING_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_INPUT_TIMING_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_INPUT_TIMING_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_INPUT_TIMING_CreateAutoName(void);
	private: bool CHANGE_INPUT_TIMING_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_INPUT_TIMING_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void STREAMING_VECTOR_CURRENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool STREAMING_VECTOR_CURRENT_UpdateArg1VariablePropertyStatus(void);
	private: bool STREAMING_VECTOR_CURRENT_UpdateArg2PropertyStatus(void);
	private: bool STREAMING_VECTOR_CURRENT_UpdateArg3VariablePropertyStatus(void);
	private: bool STREAMING_VECTOR_CURRENT_UpdateTargetVariablePropertyStatus(void);
	private: QString STREAMING_VECTOR_CURRENT_CreateAutoName(void);
	private: bool STREAMING_VECTOR_CURRENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void STREAMING_VECTOR_CURRENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void STREAMING_VECTOR_DELTA_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool STREAMING_VECTOR_DELTA_UpdateArg1VariablePropertyStatus(void);
	private: bool STREAMING_VECTOR_DELTA_UpdateArg2VariablePropertyStatus(void);
	private: bool STREAMING_VECTOR_DELTA_UpdateArg3PropertyStatus(void);
	private: bool STREAMING_VECTOR_DELTA_UpdateArg4VariablePropertyStatus(void);
	private: bool STREAMING_VECTOR_DELTA_UpdateTargetVariablePropertyStatus(void);
	private: QString STREAMING_VECTOR_DELTA_CreateAutoName(void);
	private: bool STREAMING_VECTOR_DELTA_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void STREAMING_VECTOR_DELTA_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_LINE_IN_IMAGE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_LINE_IN_IMAGE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_IMAGE_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_IMAGE_UpdateArg3VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_IMAGE_UpdateArg4VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_IMAGE_UpdateArg5VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_IMAGE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_LINE_IN_IMAGE_CreateAutoName(void);
	private: bool CHECK_LINE_IN_IMAGE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_LINE_IN_IMAGE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_LINE_IN_POLYGON_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_LINE_IN_POLYGON_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_POLYGON_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_POLYGON_UpdateArg3VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_POLYGON_UpdateArg4VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_POLYGON_UpdateArg5VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_POLYGON_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_LINE_IN_POLYGON_CreateAutoName(void);
	private: bool CHECK_LINE_IN_POLYGON_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_LINE_IN_POLYGON_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_LINE_IN_SURFACE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_LINE_IN_SURFACE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_SURFACE_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_SURFACE_UpdateArg3VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_SURFACE_UpdateArg4VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_SURFACE_UpdateArg5VariablePropertyStatus(void);
	private: bool CHECK_LINE_IN_SURFACE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_LINE_IN_SURFACE_CreateAutoName(void);
	private: bool CHECK_LINE_IN_SURFACE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_LINE_IN_SURFACE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_TWO_VECTORS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_TWO_VECTORS_UpdateArg1PropertyStatus(void);
	private: bool SET_TWO_VECTORS_UpdateArg2VariablePropertyStatus(void);
	private: bool SET_TWO_VECTORS_UpdateArg3VariablePropertyStatus(void);
	private: bool SET_TWO_VECTORS_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_TWO_VECTORS_CreateAutoName(void);
	private: bool SET_TWO_VECTORS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_TWO_VECTORS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_TWO_QUATERNIONS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_TWO_QUATERNIONS_UpdateArg1PropertyStatus(void);
	private: bool SET_TWO_QUATERNIONS_UpdateArg2VariablePropertyStatus(void);
	private: bool SET_TWO_QUATERNIONS_UpdateArg3VariablePropertyStatus(void);
	private: bool SET_TWO_QUATERNIONS_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_TWO_QUATERNIONS_CreateAutoName(void);
	private: bool SET_TWO_QUATERNIONS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_TWO_QUATERNIONS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_VALUE_RANGE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_VALUE_RANGE_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_VALUE_RANGE_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_VALUE_RANGE_UpdateArg3VariablePropertyStatus(void);
	private: bool CHANGE_VALUE_RANGE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_VALUE_RANGE_CreateAutoName(void);
	private: bool CHANGE_VALUE_RANGE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_VALUE_RANGE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_CONTROL_VECTORS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_CONTROL_VECTORS_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_CONTROL_VECTORS_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_CONTROL_VECTORS_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_CONTROL_VECTORS_CreateAutoName(void);
	private: bool CHANGE_CONTROL_VECTORS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_CONTROL_VECTORS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_CONTROL_QUATERNIONS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_CONTROL_QUATERNIONS_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_CONTROL_QUATERNIONS_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_CONTROL_QUATERNIONS_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_CONTROL_QUATERNIONS_CreateAutoName(void);
	private: bool CHANGE_CONTROL_QUATERNIONS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_CONTROL_QUATERNIONS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_COLLISION_POLYGONS_INFO_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_COLLISION_POLYGONS_INFO_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_COLLISION_POLYGONS_INFO_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_COLLISION_POLYGONS_INFO_CreateAutoName(void);
	private: bool ENABLE_COLLISION_POLYGONS_INFO_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_COLLISION_POLYGONS_INFO_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_COLLISION_CHECKING_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_COLLISION_CHECKING_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_COLLISION_CHECKING_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_COLLISION_CHECKING_CreateAutoName(void);
	private: bool ENABLE_COLLISION_CHECKING_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_COLLISION_CHECKING_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_COLLISION_GROUP_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_COLLISION_GROUP_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_COLLISION_GROUP_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_COLLISION_GROUP_CreateAutoName(void);
	private: bool CHANGE_COLLISION_GROUP_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_COLLISION_GROUP_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_COLLISION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_COLLISION_UpdateArg1PropertyStatus(void);
	private: bool CHECK_COLLISION_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_COLLISION_UpdateArg3VariablePropertyStatus(void);
	private: bool CHECK_COLLISION_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_COLLISION_CreateAutoName(void);
	private: bool CHECK_COLLISION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_COLLISION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SWAP_ITEMS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SWAP_ITEMS_UpdateArg1PropertyStatus(void);
	private: bool SWAP_ITEMS_UpdateArg2VariablePropertyStatus(void);
	private: bool SWAP_ITEMS_UpdateArg3VariablePropertyStatus(void);
	private: bool SWAP_ITEMS_UpdateArg4VariablePropertyStatus(void);
	private: bool SWAP_ITEMS_UpdateArg5VariablePropertyStatus(void);
	private: bool SWAP_ITEMS_UpdateTargetVariablePropertyStatus(void);
	private: QString SWAP_ITEMS_CreateAutoName(void);
	private: bool SWAP_ITEMS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SWAP_ITEMS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void REMOVE_FROM_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool REMOVE_FROM_LIST_UpdateArg1PropertyStatus(void);
	private: bool REMOVE_FROM_LIST_UpdateArg2VariablePropertyStatus(void);
	private: bool REMOVE_FROM_LIST_UpdateArg3VariablePropertyStatus(void);
	private: bool REMOVE_FROM_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString REMOVE_FROM_LIST_CreateAutoName(void);
	private: bool REMOVE_FROM_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void REMOVE_FROM_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_RANDOM_VALUE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_RANDOM_VALUE_UpdateArg1PropertyStatus(void);
	private: bool GET_RANDOM_VALUE_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_RANDOM_VALUE_UpdateArg3VariablePropertyStatus(void);
	private: bool GET_RANDOM_VALUE_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_RANDOM_VALUE_CreateAutoName(void);
	private: bool GET_RANDOM_VALUE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_RANDOM_VALUE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_ROTATION_FROM_TO_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_ROTATION_FROM_TO_UpdateArg1PropertyStatus(void);
	private: bool CREATE_ROTATION_FROM_TO_UpdateArg2VariablePropertyStatus(void);
	private: bool CREATE_ROTATION_FROM_TO_UpdateArg3VariablePropertyStatus(void);
	private: bool CREATE_ROTATION_FROM_TO_UpdateTargetVariablePropertyStatus(void);
	private: QString CREATE_ROTATION_FROM_TO_CreateAutoName(void);
	private: bool CREATE_ROTATION_FROM_TO_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_ROTATION_FROM_TO_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void STREAMING_FLOAT_T_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool STREAMING_FLOAT_T_UpdateArg1VariablePropertyStatus(void);
	private: bool STREAMING_FLOAT_T_UpdateArg2PropertyStatus(void);
	private: bool STREAMING_FLOAT_T_UpdateArg3VariablePropertyStatus(void);
	private: bool STREAMING_FLOAT_T_UpdateTargetVariablePropertyStatus(void);
	private: QString STREAMING_FLOAT_T_CreateAutoName(void);
	private: bool STREAMING_FLOAT_T_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void STREAMING_FLOAT_T_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_ROTATION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_ROTATION_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_ROTATION_UpdateArg2VariablePropertyStatus(void);
	private: bool CREATE_ROTATION_UpdateTargetVariablePropertyStatus(void);
	private: QString CREATE_ROTATION_CreateAutoName(void);
	private: bool CREATE_ROTATION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_ROTATION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_BOX_TEXTURE_MAP_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_BOX_TEXTURE_MAP_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_BOX_TEXTURE_MAP_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_BOX_TEXTURE_MAP_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_BOX_TEXTURE_MAP_CreateAutoName(void);
	private: bool CHANGE_BOX_TEXTURE_MAP_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_BOX_TEXTURE_MAP_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_BOX_TEXTURE_MAP_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_BOX_TEXTURE_MAP_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_BOX_TEXTURE_MAP_UpdateArg2VariablePropertyStatus(void);
	private: bool CREATE_BOX_TEXTURE_MAP_UpdateTargetVariablePropertyStatus(void);
	private: QString CREATE_BOX_TEXTURE_MAP_CreateAutoName(void);
	private: bool CREATE_BOX_TEXTURE_MAP_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_BOX_TEXTURE_MAP_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_LINE_ANGLE_Z_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_LINE_ANGLE_Z_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_LINE_ANGLE_Z_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_LINE_ANGLE_Z_UpdateArg3VariablePropertyStatus(void);
	private: QString GET_LINE_ANGLE_Z_CreateAutoName(void);
	private: bool GET_LINE_ANGLE_Z_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_LINE_ANGLE_Z_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_VIEWING_POINT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_VIEWING_POINT_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_VIEWING_POINT_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_VIEWING_POINT_CreateAutoName(void);
	private: bool CHANGE_VIEWING_POINT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_VIEWING_POINT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_DISTANCE_TO_VIEWING_POINT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_DISTANCE_TO_VIEWING_POINT_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_DISTANCE_TO_VIEWING_POINT_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_DISTANCE_TO_VIEWING_POINT_CreateAutoName(void);
	private: bool CHANGE_DISTANCE_TO_VIEWING_POINT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_DISTANCE_TO_VIEWING_POINT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ZOOM_SPEED_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ZOOM_SPEED_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ZOOM_SPEED_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ZOOM_SPEED_CreateAutoName(void);
	private: bool CHANGE_ZOOM_SPEED_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ZOOM_SPEED_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ZOOM_NEAR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ZOOM_NEAR_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ZOOM_NEAR_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ZOOM_NEAR_CreateAutoName(void);
	private: bool CHANGE_ZOOM_NEAR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ZOOM_NEAR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_ZOOM_FAR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_ZOOM_FAR_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_ZOOM_FAR_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_ZOOM_FAR_CreateAutoName(void);
	private: bool CHANGE_ZOOM_FAR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_ZOOM_FAR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_HITBOX_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_HITBOX_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_HITBOX_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_HITBOX_CreateAutoName(void);
	private: bool CHANGE_HITBOX_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_HITBOX_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CAMERA_LOOK_AT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CAMERA_LOOK_AT_UpdateArg1VariablePropertyStatus(void);
	private: bool CAMERA_LOOK_AT_UpdateTargetVariablePropertyStatus(void);
	private: QString CAMERA_LOOK_AT_CreateAutoName(void);
	private: bool CAMERA_LOOK_AT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CAMERA_LOOK_AT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_VECTOR_COMPONENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_VECTOR_COMPONENT_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_VECTOR_COMPONENT_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_VECTOR_COMPONENT_UpdateArg3VariablePropertyStatus(void);
	private: bool CHANGE_VECTOR_COMPONENT_UpdateArg4VariablePropertyStatus(void);
	private: bool CHANGE_VECTOR_COMPONENT_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_VECTOR_COMPONENT_CreateAutoName(void);
	private: bool CHANGE_VECTOR_COMPONENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_VECTOR_COMPONENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_VECTOR_COMPONENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_VECTOR_COMPONENT_UpdateArg1PropertyStatus(void);
	private: bool GET_VECTOR_COMPONENT_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_VECTOR_COMPONENT_UpdateArg3VariablePropertyStatus(void);
	private: bool GET_VECTOR_COMPONENT_UpdateArg4VariablePropertyStatus(void);
	private: bool GET_VECTOR_COMPONENT_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_VECTOR_COMPONENT_CreateAutoName(void);
	private: bool GET_VECTOR_COMPONENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_VECTOR_COMPONENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void VECTOR_TO_SPHERICAL_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool VECTOR_TO_SPHERICAL_UpdateArg1PropertyStatus(void);
	private: bool VECTOR_TO_SPHERICAL_UpdateArg2VariablePropertyStatus(void);
	private: bool VECTOR_TO_SPHERICAL_UpdateArg3VariablePropertyStatus(void);
	private: bool VECTOR_TO_SPHERICAL_UpdateArg4VariablePropertyStatus(void);
	private: bool VECTOR_TO_SPHERICAL_UpdateTargetVariablePropertyStatus(void);
	private: QString VECTOR_TO_SPHERICAL_CreateAutoName(void);
	private: bool VECTOR_TO_SPHERICAL_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void VECTOR_TO_SPHERICAL_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_NORMALIZED_VECTOR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_NORMALIZED_VECTOR_UpdateArg1PropertyStatus(void);
	private: bool GET_NORMALIZED_VECTOR_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_NORMALIZED_VECTOR_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_NORMALIZED_VECTOR_CreateAutoName(void);
	private: bool GET_NORMALIZED_VECTOR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_NORMALIZED_VECTOR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_VECTOR_ANGLE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_VECTOR_ANGLE_UpdateArg1PropertyStatus(void);
	private: bool GET_VECTOR_ANGLE_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_VECTOR_ANGLE_UpdateArg3VariablePropertyStatus(void);
	private: bool GET_VECTOR_ANGLE_UpdateArg4VariablePropertyStatus(void);
	private: QString GET_VECTOR_ANGLE_CreateAutoName(void);
	private: bool GET_VECTOR_ANGLE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_VECTOR_ANGLE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_VECTOR_LENGTH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_VECTOR_LENGTH_UpdateArg1PropertyStatus(void);
	private: bool GET_VECTOR_LENGTH_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_VECTOR_LENGTH_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_VECTOR_LENGTH_CreateAutoName(void);
	private: bool GET_VECTOR_LENGTH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_VECTOR_LENGTH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_FRUSTUM_IN_QUAD_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_FRUSTUM_IN_QUAD_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_FRUSTUM_IN_QUAD_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_FRUSTUM_IN_QUAD_UpdateArg3VariablePropertyStatus(void);
	private: bool CHECK_FRUSTUM_IN_QUAD_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_FRUSTUM_IN_QUAD_CreateAutoName(void);
	private: bool CHECK_FRUSTUM_IN_QUAD_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_FRUSTUM_IN_QUAD_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_DATA_FROM_CONTROL_VECTOR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_DATA_FROM_CONTROL_VECTOR_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_DATA_FROM_CONTROL_VECTOR_UpdateArg2PropertyStatus(void);
	private: bool GET_DATA_FROM_CONTROL_VECTOR_UpdateArg3VariablePropertyStatus(void);
	private: bool GET_DATA_FROM_CONTROL_VECTOR_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_DATA_FROM_CONTROL_VECTOR_CreateAutoName(void);
	private: bool GET_DATA_FROM_CONTROL_VECTOR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_DATA_FROM_CONTROL_VECTOR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_DATA_TO_CONTROL_VECTOR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_DATA_TO_CONTROL_VECTOR_UpdateArg1VariablePropertyStatus(void);
	private: bool SET_DATA_TO_CONTROL_VECTOR_UpdateArg2PropertyStatus(void);
	private: bool SET_DATA_TO_CONTROL_VECTOR_UpdateArg3VariablePropertyStatus(void);
	private: bool SET_DATA_TO_CONTROL_VECTOR_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_DATA_TO_CONTROL_VECTOR_CreateAutoName(void);
	private: bool SET_DATA_TO_CONTROL_VECTOR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_DATA_TO_CONTROL_VECTOR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_LINE_LENGTH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_LINE_LENGTH_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_LINE_LENGTH_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_LINE_LENGTH_UpdateArg3VariablePropertyStatus(void);
	private: QString GET_LINE_LENGTH_CreateAutoName(void);
	private: bool GET_LINE_LENGTH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_LINE_LENGTH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_CIRCLE_LENGTH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_CIRCLE_LENGTH_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_CIRCLE_LENGTH_UpdateArg2VariablePropertyStatus(void);
	private: QString GET_CIRCLE_LENGTH_CreateAutoName(void);
	private: bool GET_CIRCLE_LENGTH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_CIRCLE_LENGTH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_COLOR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_COLOR_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_COLOR_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_COLOR_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_COLOR_CreateAutoName(void);
	private: bool CHANGE_COLOR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_COLOR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_COLOR_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_COLOR_UpdateArg1PropertyStatus(void);
	private: bool GET_COLOR_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_COLOR_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_COLOR_CreateAutoName(void);
	private: bool GET_COLOR_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_COLOR_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_COLOR_COMPONENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_COLOR_COMPONENT_UpdateArg1PropertyStatus(void);
	private: bool CHANGE_COLOR_COMPONENT_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_COLOR_COMPONENT_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_COLOR_COMPONENT_CreateAutoName(void);
	private: bool CHANGE_COLOR_COMPONENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_COLOR_COMPONENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_COLOR_COMPONENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_COLOR_COMPONENT_UpdateArg1PropertyStatus(void);
	private: bool GET_COLOR_COMPONENT_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_COLOR_COMPONENT_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_COLOR_COMPONENT_CreateAutoName(void);
	private: bool GET_COLOR_COMPONENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_COLOR_COMPONENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_FLOAT_LERP_T_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_FLOAT_LERP_T_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_FLOAT_LERP_T_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_FLOAT_LERP_T_CreateAutoName(void);
	private: bool CHANGE_FLOAT_LERP_T_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_FLOAT_LERP_T_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_FLOAT_LERP_T_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_FLOAT_LERP_T_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_FLOAT_LERP_T_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_FLOAT_LERP_T_CreateAutoName(void);
	private: bool GET_FLOAT_LERP_T_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_FLOAT_LERP_T_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_FLOAT_LERP_CURRENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_FLOAT_LERP_CURRENT_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_FLOAT_LERP_CURRENT_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_FLOAT_LERP_CURRENT_CreateAutoName(void);
	private: bool GET_FLOAT_LERP_CURRENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_FLOAT_LERP_CURRENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_FLOAT_LERP_DELTA_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_FLOAT_LERP_DELTA_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_FLOAT_LERP_DELTA_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_FLOAT_LERP_DELTA_CreateAutoName(void);
	private: bool GET_FLOAT_LERP_DELTA_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_FLOAT_LERP_DELTA_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_TEXTURE_FLIP_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_TEXTURE_FLIP_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_TEXTURE_FLIP_UpdateArg2VariablePropertyStatus(void);
	private: bool ENABLE_TEXTURE_FLIP_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_TEXTURE_FLIP_CreateAutoName(void);
	private: bool ENABLE_TEXTURE_FLIP_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_TEXTURE_FLIP_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_DATA_FROM_CONTROL_QUATERNION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_DATA_FROM_CONTROL_QUATERNION_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_DATA_FROM_CONTROL_QUATERNION_UpdateArg2PropertyStatus(void);
	private: bool GET_DATA_FROM_CONTROL_QUATERNION_UpdateArg3VariablePropertyStatus(void);
	private: bool GET_DATA_FROM_CONTROL_QUATERNION_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_DATA_FROM_CONTROL_QUATERNION_CreateAutoName(void);
	private: bool GET_DATA_FROM_CONTROL_QUATERNION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_DATA_FROM_CONTROL_QUATERNION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_DATA_TO_CONTROL_QUATERNION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_DATA_TO_CONTROL_QUATERNION_UpdateArg1VariablePropertyStatus(void);
	private: bool SET_DATA_TO_CONTROL_QUATERNION_UpdateArg2PropertyStatus(void);
	private: bool SET_DATA_TO_CONTROL_QUATERNION_UpdateArg3VariablePropertyStatus(void);
	private: bool SET_DATA_TO_CONTROL_QUATERNION_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_DATA_TO_CONTROL_QUATERNION_CreateAutoName(void);
	private: bool SET_DATA_TO_CONTROL_QUATERNION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_DATA_TO_CONTROL_QUATERNION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void STREAMING_QUATERNION_CURRENT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool STREAMING_QUATERNION_CURRENT_UpdateArg1VariablePropertyStatus(void);
	private: bool STREAMING_QUATERNION_CURRENT_UpdateArg2PropertyStatus(void);
	private: bool STREAMING_QUATERNION_CURRENT_UpdateArg3VariablePropertyStatus(void);
	private: bool STREAMING_QUATERNION_CURRENT_UpdateTargetVariablePropertyStatus(void);
	private: QString STREAMING_QUATERNION_CURRENT_CreateAutoName(void);
	private: bool STREAMING_QUATERNION_CURRENT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void STREAMING_QUATERNION_CURRENT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_FREEZE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_FREEZE_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_FREEZE_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_FREEZE_CreateAutoName(void);
	private: bool ENABLE_FREEZE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_FREEZE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ROTATE_LIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ROTATE_LIST_UpdateArg1VariablePropertyStatus(void);
	private: bool ROTATE_LIST_UpdateTargetVariablePropertyStatus(void);
	private: QString ROTATE_LIST_CreateAutoName(void);
	private: bool ROTATE_LIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ROTATE_LIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_STATIC_OBJECT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_STATIC_OBJECT_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_STATIC_OBJECT_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_STATIC_OBJECT_CreateAutoName(void);
	private: bool ENABLE_STATIC_OBJECT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_STATIC_OBJECT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void STREAMING_QUATERNION_DELTA_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool STREAMING_QUATERNION_DELTA_UpdateArg1VariablePropertyStatus(void);
	private: bool STREAMING_QUATERNION_DELTA_UpdateArg2VariablePropertyStatus(void);
	private: bool STREAMING_QUATERNION_DELTA_UpdateArg3PropertyStatus(void);
	private: bool STREAMING_QUATERNION_DELTA_UpdateArg4VariablePropertyStatus(void);
	private: bool STREAMING_QUATERNION_DELTA_UpdateTargetVariablePropertyStatus(void);
	private: QString STREAMING_QUATERNION_DELTA_CreateAutoName(void);
	private: bool STREAMING_QUATERNION_DELTA_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void STREAMING_QUATERNION_DELTA_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_DELTA_SCALE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_DELTA_SCALE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_DELTA_SCALE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_DELTA_SCALE_CreateAutoName(void);
	private: bool CHANGE_DELTA_SCALE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_DELTA_SCALE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ENABLE_SHOW_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ENABLE_SHOW_UpdateArg1VariablePropertyStatus(void);
	private: bool ENABLE_SHOW_UpdateTargetVariablePropertyStatus(void);
	private: QString ENABLE_SHOW_CreateAutoName(void);
	private: bool ENABLE_SHOW_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ENABLE_SHOW_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_LINE_DIRECTION_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_LINE_DIRECTION_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_LINE_DIRECTION_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_LINE_DIRECTION_UpdateArg3VariablePropertyStatus(void);
	private: QString GET_LINE_DIRECTION_CreateAutoName(void);
	private: bool GET_LINE_DIRECTION_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_LINE_DIRECTION_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void MOVE_AROUND_PIVOT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool MOVE_AROUND_PIVOT_UpdateArg1VariablePropertyStatus(void);
	private: bool MOVE_AROUND_PIVOT_UpdateArg2VariablePropertyStatus(void);
	private: bool MOVE_AROUND_PIVOT_UpdateTargetVariablePropertyStatus(void);
	private: QString MOVE_AROUND_PIVOT_CreateAutoName(void);
	private: bool MOVE_AROUND_PIVOT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void MOVE_AROUND_PIVOT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void ROTATE_AROUND_PIVOT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool ROTATE_AROUND_PIVOT_UpdateArg1VariablePropertyStatus(void);
	private: bool ROTATE_AROUND_PIVOT_UpdateArg2VariablePropertyStatus(void);
	private: bool ROTATE_AROUND_PIVOT_UpdateArg3VariablePropertyStatus(void);
	private: bool ROTATE_AROUND_PIVOT_UpdateArg4VariablePropertyStatus(void);
	private: bool ROTATE_AROUND_PIVOT_UpdateArg5VariablePropertyStatus(void);
	private: bool ROTATE_AROUND_PIVOT_UpdateTargetVariablePropertyStatus(void);
	private: QString ROTATE_AROUND_PIVOT_CreateAutoName(void);
	private: bool ROTATE_AROUND_PIVOT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void ROTATE_AROUND_PIVOT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_BRUSH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_BRUSH_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_BRUSH_UpdateArg2VariablePropertyStatus(void);
	private: bool CREATE_BRUSH_UpdateArg3VariablePropertyStatus(void);
	private: bool CREATE_BRUSH_UpdateTargetVariablePropertyStatus(void);
	private: QString CREATE_BRUSH_CreateAutoName(void);
	private: bool CREATE_BRUSH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_BRUSH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_TILE_EXIST_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_TILE_EXIST_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_TILE_EXIST_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_TILE_EXIST_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_TILE_EXIST_CreateAutoName(void);
	private: bool CHECK_TILE_EXIST_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_TILE_EXIST_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_TILE_PASS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_TILE_PASS_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_TILE_PASS_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_TILE_PASS_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_TILE_PASS_CreateAutoName(void);
	private: bool CHECK_TILE_PASS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_TILE_PASS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_TILE_PASS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_TILE_PASS_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_TILE_PASS_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_TILE_PASS_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_TILE_PASS_CreateAutoName(void);
	private: bool CHANGE_TILE_PASS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_TILE_PASS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_TILE_SOLID_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_TILE_SOLID_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_TILE_SOLID_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_TILE_SOLID_UpdateTargetVariablePropertyStatus(void);
	private: QString CHECK_TILE_SOLID_CreateAutoName(void);
	private: bool CHECK_TILE_SOLID_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_TILE_SOLID_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CREATE_SOLID_TILE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CREATE_SOLID_TILE_UpdateArg1VariablePropertyStatus(void);
	private: bool CREATE_SOLID_TILE_UpdateArg2VariablePropertyStatus(void);
	private: bool CREATE_SOLID_TILE_UpdateTargetVariablePropertyStatus(void);
	private: QString CREATE_SOLID_TILE_CreateAutoName(void);
	private: bool CREATE_SOLID_TILE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CREATE_SOLID_TILE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_BRUSH_OF_TILE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_BRUSH_OF_TILE_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_BRUSH_OF_TILE_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_BRUSH_OF_TILE_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_BRUSH_OF_TILE_CreateAutoName(void);
	private: bool GET_BRUSH_OF_TILE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_BRUSH_OF_TILE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_TILED_SPACE_SIZE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_TILED_SPACE_SIZE_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_TILED_SPACE_SIZE_UpdateArg2VariablePropertyStatus(void);
	private: bool CHANGE_TILED_SPACE_SIZE_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_TILED_SPACE_SIZE_CreateAutoName(void);
	private: bool CHANGE_TILED_SPACE_SIZE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_TILED_SPACE_SIZE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_PUBLIC_TILE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_PUBLIC_TILE_UpdateArg1VariablePropertyStatus(void);
	private: bool SET_PUBLIC_TILE_UpdateArg2KeyPropertyStatus(void);
	private: bool SET_PUBLIC_TILE_UpdateArg2VariablePropertyStatus(void);
	private: bool SET_PUBLIC_TILE_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_PUBLIC_TILE_CreateAutoName(void);
	private: bool SET_PUBLIC_TILE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_PUBLIC_TILE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SET_PUBLIC_TEXTURE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SET_PUBLIC_TEXTURE_UpdateArg1VariablePropertyStatus(void);
	private: bool SET_PUBLIC_TEXTURE_UpdateArg2KeyPropertyStatus(void);
	private: bool SET_PUBLIC_TEXTURE_UpdateArg2VariablePropertyStatus(void);
	private: bool SET_PUBLIC_TEXTURE_UpdateTargetVariablePropertyStatus(void);
	private: QString SET_PUBLIC_TEXTURE_CreateAutoName(void);
	private: bool SET_PUBLIC_TEXTURE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SET_PUBLIC_TEXTURE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_TILE_CENTER_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_TILE_CENTER_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_TILE_CENTER_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_TILE_CENTER_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_TILE_CENTER_CreateAutoName(void);
	private: bool GET_TILE_CENTER_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_TILE_CENTER_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void MOVE_TILE_FROM_TO_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool MOVE_TILE_FROM_TO_UpdateArg1VariablePropertyStatus(void);
	private: bool MOVE_TILE_FROM_TO_UpdateArg2VariablePropertyStatus(void);
	private: bool MOVE_TILE_FROM_TO_UpdateArg3VariablePropertyStatus(void);
	private: bool MOVE_TILE_FROM_TO_UpdateTargetVariablePropertyStatus(void);
	private: QString MOVE_TILE_FROM_TO_CreateAutoName(void);
	private: bool MOVE_TILE_FROM_TO_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void MOVE_TILE_FROM_TO_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void SWAP_TWO_TILES_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool SWAP_TWO_TILES_UpdateArg1VariablePropertyStatus(void);
	private: bool SWAP_TWO_TILES_UpdateArg2VariablePropertyStatus(void);
	private: bool SWAP_TWO_TILES_UpdateArg3VariablePropertyStatus(void);
	private: bool SWAP_TWO_TILES_UpdateTargetVariablePropertyStatus(void);
	private: QString SWAP_TWO_TILES_CreateAutoName(void);
	private: bool SWAP_TWO_TILES_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void SWAP_TWO_TILES_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void COPY_TILE_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool COPY_TILE_UpdateArg1VariablePropertyStatus(void);
	private: bool COPY_TILE_UpdateArg2VariablePropertyStatus(void);
	private: bool COPY_TILE_UpdateArg3VariablePropertyStatus(void);
	private: bool COPY_TILE_UpdateTargetVariablePropertyStatus(void);
	private: QString COPY_TILE_CreateAutoName(void);
	private: bool COPY_TILE_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void COPY_TILE_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_VIEWING_POINT_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_VIEWING_POINT_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_VIEWING_POINT_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_VIEWING_POINT_CreateAutoName(void);
	private: bool GET_VIEWING_POINT_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_VIEWING_POINT_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_CAMERA_LOOK_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_CAMERA_LOOK_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_CAMERA_LOOK_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_CAMERA_LOOK_CreateAutoName(void);
	private: bool GET_CAMERA_LOOK_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_CAMERA_LOOK_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_VECTOR_LERP_PATH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_VECTOR_LERP_PATH_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_VECTOR_LERP_PATH_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_VECTOR_LERP_PATH_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_VECTOR_LERP_PATH_CreateAutoName(void);
	private: bool GET_VECTOR_LERP_PATH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_VECTOR_LERP_PATH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHANGE_STRIP_POINTS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHANGE_STRIP_POINTS_UpdateArg1VariablePropertyStatus(void);
	private: bool CHANGE_STRIP_POINTS_UpdateArg2PropertyStatus(void);
	private: bool CHANGE_STRIP_POINTS_UpdateArg3VariablePropertyStatus(void);
	private: bool CHANGE_STRIP_POINTS_UpdateTargetVariablePropertyStatus(void);
	private: QString CHANGE_STRIP_POINTS_CreateAutoName(void);
	private: bool CHANGE_STRIP_POINTS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHANGE_STRIP_POINTS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_VECTOR_LERP_T_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_VECTOR_LERP_T_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_VECTOR_LERP_T_UpdateArg2PropertyStatus(void);
	private: bool GET_VECTOR_LERP_T_UpdateArg3VariablePropertyStatus(void);
	private: bool GET_VECTOR_LERP_T_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_VECTOR_LERP_T_CreateAutoName(void);
	private: bool GET_VECTOR_LERP_T_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_VECTOR_LERP_T_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_QUATERNION_LERP_T_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_QUATERNION_LERP_T_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_QUATERNION_LERP_T_UpdateArg2PropertyStatus(void);
	private: bool GET_QUATERNION_LERP_T_UpdateArg3VariablePropertyStatus(void);
	private: bool GET_QUATERNION_LERP_T_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_QUATERNION_LERP_T_CreateAutoName(void);
	private: bool GET_QUATERNION_LERP_T_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_QUATERNION_LERP_T_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_QUATERNION_LERP_PATH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_QUATERNION_LERP_PATH_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_QUATERNION_LERP_PATH_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_QUATERNION_LERP_PATH_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_QUATERNION_LERP_PATH_CreateAutoName(void);
	private: bool GET_QUATERNION_LERP_PATH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_QUATERNION_LERP_PATH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_LIST_LENGTH_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_LIST_LENGTH_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_LIST_LENGTH_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_LIST_LENGTH_CreateAutoName(void);
	private: bool GET_LIST_LENGTH_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_LIST_LENGTH_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_RADIUS_FROM_2_POINTS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_RADIUS_FROM_2_POINTS_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_RADIUS_FROM_2_POINTS_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_RADIUS_FROM_2_POINTS_UpdateArg3VariablePropertyStatus(void);
	private: QString GET_RADIUS_FROM_2_POINTS_CreateAutoName(void);
	private: bool GET_RADIUS_FROM_2_POINTS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_RADIUS_FROM_2_POINTS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_RADIUS_FROM_3_POINTS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_RADIUS_FROM_3_POINTS_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_RADIUS_FROM_3_POINTS_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_RADIUS_FROM_3_POINTS_UpdateArg3VariablePropertyStatus(void);
	private: bool GET_RADIUS_FROM_3_POINTS_UpdateArg4VariablePropertyStatus(void);
	private: QString GET_RADIUS_FROM_3_POINTS_CreateAutoName(void);
	private: bool GET_RADIUS_FROM_3_POINTS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_RADIUS_FROM_3_POINTS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_CONTROL_VECTORS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_CONTROL_VECTORS_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_CONTROL_VECTORS_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_CONTROL_VECTORS_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_CONTROL_VECTORS_CreateAutoName(void);
	private: bool GET_CONTROL_VECTORS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_CONTROL_VECTORS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void GET_CONTROL_QUATERNIONS_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool GET_CONTROL_QUATERNIONS_UpdateArg1VariablePropertyStatus(void);
	private: bool GET_CONTROL_QUATERNIONS_UpdateArg2VariablePropertyStatus(void);
	private: bool GET_CONTROL_QUATERNIONS_UpdateTargetVariablePropertyStatus(void);
	private: QString GET_CONTROL_QUATERNIONS_CreateAutoName(void);
	private: bool GET_CONTROL_QUATERNIONS_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void GET_CONTROL_QUATERNIONS_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);
	private: void CHECK_EQUALITY_DropEvent(QTableWidgetItem* _it, const QModelIndex& _index, const QString& _suffix, QString& _fileName);
	private: bool CHECK_EQUALITY_UpdateArg1VariablePropertyStatus(void);
	private: bool CHECK_EQUALITY_UpdateArg1EqualityPropertyStatus(void);
	private: bool CHECK_EQUALITY_UpdateArg2VariablePropertyStatus(void);
	private: bool CHECK_EQUALITY_UpdateArg3VariablePropertyStatus(void);
	private: QString CHECK_EQUALITY_CreateAutoName(void);
	private: bool CHECK_EQUALITY_UpdateRow(const QModelIndex& _index, const QString& _type);
	private: void CHECK_EQUALITY_GetEditorTypeForCell(const QModelIndex& _index, const QString& _actionType, int& _editor);

};



#endif 

