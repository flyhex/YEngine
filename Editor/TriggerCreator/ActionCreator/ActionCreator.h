#ifndef ACTIONCREATOR_H
#define ACTIONCREATOR_H
#include <QTreeWidget>
#include <QListView>
#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtGui/QApplication>
#include <QtGui/QButtonGroup>
#include <QtGui/QCheckBox>
#include <QtGui/QDialog>
#include <QtGui/QDialogButtonBox>
#include <QtGui/QDoubleSpinBox>
#include <QtGui/QFrame>
#include <QtGui/QGroupBox>
#include <QtGui/QHeaderView>
#include <QtGui/QLabel>
#include <QtGui/QLineEdit>
#include <QtGui/QPushButton>
#include <QtGui/QRadioButton>
#include <QtGui/QScrollArea>
#include <QtGui/QSpinBox>
#include <QtGui/QVBoxLayout>
#include <QtGui/QWidget>
#include <Engine/Core/Trigger/Action/AbstractAction.h>
#include <Editor/TriggerCreator/ActionCreator/ActionTableWidget/ActionTableWidget.h>
#include <Editor/AssetsLibraryTree/AssetsLibraryTree.h>
class ActionCreator: public QDialog 
{
	Q_OBJECT
	private: QLabel* actionStateLabel;
	private: ActionTableWidget *actionTable;

	private: AbstractAction* action;
	private: bool fastCreatingEnable;
	private: QLabel *autoNameLabel;
    private: QCheckBox *autoNameCheckBox;

	private: QFrame *line;
     	
    private: QLabel* assetsLibraryLabel;
	private: AssetsLibraryTree* assetsLibraryTree;
    private: QPushButton* refreshAssetsLibraryPushButton;
   
    private: QToolButton* helpButton;
    private: QPushButton *okButton;
    private: QPushButton *cancelButton;
	public: ActionCreator(QWidget* _parent = 0);
	public: virtual ~ActionCreator(void);
    private slots: void IsOk(void);
	private slots: void ShowDoc(void);
	public slots: void RefreshAssetsLibrary(void);
	public slots: void RefreshActionTable(void);
	public: void SetNameDisable(bool _disable);
	public: void SetObjectName(QString _name);
	public slots: void AutoNameIsChanged(int _state);
	public: QString Vector3ToString(Vector3 _vector);
	public: Vector3 StringToVector3(QString _vector);
	public: QString Vector2ToString(Vector2 _vector);
	public: Vector2 StringToVector2(QString _vector);
	public: QString QuaternionToString(Quaternion _quaternion);
	public: Quaternion StringToQuaternion(QString _quaternion);
	public: void SetFastCreating(bool _state);
	public: AbstractAction* GetAction(void)const;
	public: void SetAction(QString _name);
	signals: void ActionIsEdited(QString _name);
	private: void CHANGE_NAME_SetAction(int _actionType);
	private: void CHANGE_NAME_Create(void);
	private: void CREATE_TIMER_SetAction(int _actionType);
	private: void CREATE_TIMER_Create(void);
	private: void CREATE_CAMERA_SetAction(int _actionType);
	private: void CREATE_CAMERA_Create(void);
	private: void CREATE_MESH_SetAction(int _actionType);
	private: void CREATE_MESH_Create(void);
	private: void CREATE_SET_SetAction(int _actionType);
	private: void CREATE_SET_Create(void);
	private: void CREATE_TEXTURED_ANIMATION_SetAction(int _actionType);
	private: void CREATE_TEXTURED_ANIMATION_Create(void);
	private: void CREATE_TEXTURE_SetAction(int _actionType);
	private: void CREATE_TEXTURE_Create(void);
	private: void GET_SYSTEM_TIME_SetAction(int _actionType);
	private: void GET_SYSTEM_TIME_Create(void);
	private: void CREATE_TRIGGER_SetAction(int _actionType);
	private: void CREATE_TRIGGER_Create(void);
	private: void CHANGE_VALUE_SetAction(int _actionType);
	private: void CHANGE_VALUE_Create(void);
	private: void LOAD_ASSET_SetAction(int _actionType);
	private: void LOAD_ASSET_Create(void);
	private: void GET_NAME_SetAction(int _actionType);
	private: void GET_NAME_Create(void);
	private: void CHECK_OBJECT_EXIST_SetAction(int _actionType);
	private: void CHECK_OBJECT_EXIST_Create(void);
	private: void CHECK_PROPERTY_SetAction(int _actionType);
	private: void CHECK_PROPERTY_Create(void);
	private: void CHECK_LIST_EMPTY_SetAction(int _actionType);
	private: void CHECK_LIST_EMPTY_Create(void);
	private: void SEND_MESSAGE_SetAction(int _actionType);
	private: void SEND_MESSAGE_Create(void);
	private: void DESTROY_OBJECT_SetAction(int _actionType);
	private: void DESTROY_OBJECT_Create(void);
	private: void SAVE_TO_FILE_SetAction(int _actionType);
	private: void SAVE_TO_FILE_Create(void);
	private: void SET_PRIVATE_ASSET_SetAction(int _actionType);
	private: void SET_PRIVATE_ASSET_Create(void);
	private: void CHANGE_ANIMATION_FRAME_SetAction(int _actionType);
	private: void CHANGE_ANIMATION_FRAME_Create(void);
	private: void RESIZE_SET_SetAction(int _actionType);
	private: void RESIZE_SET_Create(void);
	private: void CHANGE_ACTIVATION_LIMIT_SetAction(int _actionType);
	private: void CHANGE_ACTIVATION_LIMIT_Create(void);
	private: void CHANGE_DEACTIVATION_MODE_SetAction(int _actionType);
	private: void CHANGE_DEACTIVATION_MODE_Create(void);
	private: void CREATE_EMPTY_TILE_SetAction(int _actionType);
	private: void CREATE_EMPTY_TILE_Create(void);
	private: void REMOVE_BRUSH_SetAction(int _actionType);
	private: void REMOVE_BRUSH_Create(void);
	private: void GET_AMOUNT_OF_FRAMES_SetAction(int _actionType);
	private: void GET_AMOUNT_OF_FRAMES_Create(void);
	private: void GET_FRAME_SIZE_SetAction(int _actionType);
	private: void GET_FRAME_SIZE_Create(void);
	private: void CHANGE_ATLAS_SetAction(int _actionType);
	private: void CHANGE_ATLAS_Create(void);
	private: void GET_TEXTURE_SIZE_SetAction(int _actionType);
	private: void GET_TEXTURE_SIZE_Create(void);
	private: void CHANGE_RANDOM_SEED_SetAction(int _actionType);
	private: void CHANGE_RANDOM_SEED_Create(void);
	private: void CHANGE_ITEM_VALUE_SetAction(int _actionType);
	private: void CHANGE_ITEM_VALUE_Create(void);
	private: void CHANGE_LIST_VALUE_SetAction(int _actionType);
	private: void CHANGE_LIST_VALUE_Create(void);
	private: void REMOVE_FROM_LIST_SetAction(int _actionType);
	private: void REMOVE_FROM_LIST_Create(void);
	private: void ENABLE_ROTATION_RANGE_SetAction(int _actionType);
	private: void ENABLE_ROTATION_RANGE_Create(void);
	private: void ADD_TO_LIST_SetAction(int _actionType);
	private: void ADD_TO_LIST_Create(void);
	private: void TILED_SPACE_FILL_SetAction(int _actionType);
	private: void TILED_SPACE_FILL_Create(void);
	private: void CHANGE_ROTATION_RANGE_SetAction(int _actionType);
	private: void CHANGE_ROTATION_RANGE_Create(void);
	private: void ADD_INPUT_EVENT_SetAction(int _actionType);
	private: void ADD_INPUT_EVENT_Create(void);
	private: void SET_ONE_INPUT_EVENT_SetAction(int _actionType);
	private: void SET_ONE_INPUT_EVENT_Create(void);
	private: void GET_DATA_FROM_ITEM_SetAction(int _actionType);
	private: void GET_DATA_FROM_ITEM_Create(void);
	private: void GET_ITEM_INDEX_SetAction(int _actionType);
	private: void GET_ITEM_INDEX_Create(void);
	private: void GET_DATA_FROM_SLOT_SetAction(int _actionType);
	private: void GET_DATA_FROM_SLOT_Create(void);
	private: void SET_DATA_TO_SLOT_SetAction(int _actionType);
	private: void SET_DATA_TO_SLOT_Create(void);
	private: void RANDOMIZE_LIST_SetAction(int _actionType);
	private: void RANDOMIZE_LIST_Create(void);
	private: void GET_AMOUNT_OF_ITEMS_SetAction(int _actionType);
	private: void GET_AMOUNT_OF_ITEMS_Create(void);
	private: void GET_AMOUNT_OF_SLOTS_SetAction(int _actionType);
	private: void GET_AMOUNT_OF_SLOTS_Create(void);
	private: void COPY_LIST_SetAction(int _actionType);
	private: void COPY_LIST_Create(void);
	private: void CLEAR_LIST_SetAction(int _actionType);
	private: void CLEAR_LIST_Create(void);
	private: void CLEAR_INPUT_EVENTS_SetAction(int _actionType);
	private: void CLEAR_INPUT_EVENTS_Create(void);
	private: void REPLAY_SetAction(int _actionType);
	private: void REPLAY_Create(void);
	private: void CREATE_LIST_SetAction(int _actionType);
	private: void CREATE_LIST_Create(void);
	private: void CREATE_VARIABLE_SetAction(int _actionType);
	private: void CREATE_VARIABLE_Create(void);
	private: void CHANGE_BACKGROUND_COLOR_SetAction(int _actionType);
	private: void CHANGE_BACKGROUND_COLOR_Create(void);
	private: void GET_COLOR_SetAction(int _actionType);
	private: void GET_COLOR_Create(void);
	private: void CHANGE_COLOR_SetAction(int _actionType);
	private: void CHANGE_COLOR_Create(void);
	private: void GET_SCALE_SetAction(int _actionType);
	private: void GET_SCALE_Create(void);
	private: void DISPLACE_SCALE_SetAction(int _actionType);
	private: void DISPLACE_SCALE_Create(void);
	private: void REPLACE_SCALE_SetAction(int _actionType);
	private: void REPLACE_SCALE_Create(void);
	private: void GET_POSITION_SetAction(int _actionType);
	private: void GET_POSITION_Create(void);
	private: void REPLACE_POSITION_SetAction(int _actionType);
	private: void REPLACE_POSITION_Create(void);
	private: void DISPLACE_POSITION_SetAction(int _actionType);
	private: void DISPLACE_POSITION_Create(void);
	private: void GET_ROTATION_SetAction(int _actionType);
	private: void GET_ROTATION_Create(void);
	private: void REPLACE_ROTATION_SetAction(int _actionType);
	private: void REPLACE_ROTATION_Create(void);
	private: void DISPLACE_ROTATION_SetAction(int _actionType);
	private: void DISPLACE_ROTATION_Create(void);
	private: void CHANGE_PLANE_NORMAL_SetAction(int _actionType);
	private: void CHANGE_PLANE_NORMAL_Create(void);
	private: void CHANGE_MESH_SetAction(int _actionType);
	private: void CHANGE_MESH_Create(void);
	private: void CREATE_QUAD_SetAction(int _actionType);
	private: void CREATE_QUAD_Create(void);
	private: void CREATE_BOX_SetAction(int _actionType);
	private: void CREATE_BOX_Create(void);
	private: void CHANGE_INTERSECTION_MODE_SetAction(int _actionType);
	private: void CHANGE_INTERSECTION_MODE_Create(void);
	private: void ENABLE_PROPERTY_SetAction(int _actionType);
	private: void ENABLE_PROPERTY_Create(void);
	private: void ENABLE_BACK_FACE_CULLING_SetAction(int _actionType);
	private: void ENABLE_BACK_FACE_CULLING_Create(void);
	private: void ENABLE_POSITION_OFFSET_SetAction(int _actionType);
	private: void ENABLE_POSITION_OFFSET_Create(void);
	private: void ENABLE_ZOOM_SetAction(int _actionType);
	private: void ENABLE_ZOOM_Create(void);
	private: void ENABLE_ROTATION_SetAction(int _actionType);
	private: void ENABLE_ROTATION_Create(void);
	private: void CHANGE_FRONT_TEXTURE_SetAction(int _actionType);
	private: void CHANGE_FRONT_TEXTURE_Create(void);
	private: void CHANGE_BACK_TEXTURE_SetAction(int _actionType);
	private: void CHANGE_BACK_TEXTURE_Create(void);
	private: void CHANGE_FRONT_TEXTURED_ANIMATION_SetAction(int _actionType);
	private: void CHANGE_FRONT_TEXTURED_ANIMATION_Create(void);
	private: void CHANGE_BACK_TEXTURED_ANIMATION_SetAction(int _actionType);
	private: void CHANGE_BACK_TEXTURED_ANIMATION_Create(void);
	private: void ENABLE_SHOW_CURSOR_SetAction(int _actionType);
	private: void ENABLE_SHOW_CURSOR_Create(void);
	private: void ENABLE_Z_BUFFER_SetAction(int _actionType);
	private: void ENABLE_Z_BUFFER_Create(void);
	private: void ENABLE_TRIGGERS_BLOCK_SetAction(int _actionType);
	private: void ENABLE_TRIGGERS_BLOCK_Create(void);
	private: void CREATE_KEYBOARD_EVENT_SetAction(int _actionType);
	private: void CREATE_KEYBOARD_EVENT_Create(void);
	private: void PICK_SCENE_SetAction(int _actionType);
	private: void PICK_SCENE_Create(void);
	private: void ADD_TO_LAYER_SetAction(int _actionType);
	private: void ADD_TO_LAYER_Create(void);
	private: void REMOVE_FROM_LAYER_SetAction(int _actionType);
	private: void REMOVE_FROM_LAYER_Create(void);
	private: void ADD_TO_UPDATE_LIST_SetAction(int _actionType);
	private: void ADD_TO_UPDATE_LIST_Create(void);
	private: void REMOVE_FROM_UPDATE_LIST_SetAction(int _actionType);
	private: void REMOVE_FROM_UPDATE_LIST_Create(void);
	private: void ADD_TO_RENDER_LIST_SetAction(int _actionType);
	private: void ADD_TO_RENDER_LIST_Create(void);
	private: void REMOVE_FROM_RENDER_LIST_SetAction(int _actionType);
	private: void REMOVE_FROM_RENDER_LIST_Create(void);
	private: void PICK_CAMERA_SetAction(int _actionType);
	private: void PICK_CAMERA_Create(void);
	private: void INVERSE_LIST_SetAction(int _actionType);
	private: void INVERSE_LIST_Create(void);
	private: void CHANGE_CAMERA_SetAction(int _actionType);
	private: void CHANGE_CAMERA_Create(void);
	private: void CHANGE_RENDER_TARGET_SetAction(int _actionType);
	private: void CHANGE_RENDER_TARGET_Create(void);
	private: void CHANGE_FLOAT_LERP_MODE_SetAction(int _actionType);
	private: void CHANGE_FLOAT_LERP_MODE_Create(void);
	private: void CHANGE_PROJECTION_MODE_SetAction(int _actionType);
	private: void CHANGE_PROJECTION_MODE_Create(void);
	private: void CHANGE_MOVEMENT_MODE_SetAction(int _actionType);
	private: void CHANGE_MOVEMENT_MODE_Create(void);
	private: void CHANGE_ROTATION_MODE_SetAction(int _actionType);
	private: void CHANGE_ROTATION_MODE_Create(void);
	private: void GET_SELECT_RAY_SetAction(int _actionType);
	private: void GET_SELECT_RAY_Create(void);
	private: void CREATE_FLOAT_LERP_SetAction(int _actionType);
	private: void CREATE_FLOAT_LERP_Create(void);
	private: void CREATE_PLAYER_CONTROL_SetAction(int _actionType);
	private: void CREATE_PLAYER_CONTROL_Create(void);
	private: void CREATE_QUATERNION_LERP_SetAction(int _actionType);
	private: void CREATE_QUATERNION_LERP_Create(void);
	private: void CREATE_VECTOR_LERP_SetAction(int _actionType);
	private: void CREATE_VECTOR_LERP_Create(void);
	private: void CHANGE_FLOAT_LERP_SPEED_SetAction(int _actionType);
	private: void CHANGE_FLOAT_LERP_SPEED_Create(void);
	private: void STREAMING_FLOAT_T_SetAction(int _actionType);
	private: void STREAMING_FLOAT_T_Create(void);
	private: void STREAMING_FLOAT_CURRENT_SetAction(int _actionType);
	private: void STREAMING_FLOAT_CURRENT_Create(void);
	private: void CHANGE_FLOAT_LERP_TARGET_SetAction(int _actionType);
	private: void CHANGE_FLOAT_LERP_TARGET_Create(void);
	private: void STREAMING_FLOAT_DELTA_SetAction(int _actionType);
	private: void STREAMING_FLOAT_DELTA_Create(void);
	private: void CHANGE_VECTOR_LERP_MODE_SetAction(int _actionType);
	private: void CHANGE_VECTOR_LERP_MODE_Create(void);
	private: void CHANGE_FLOAT_LERP_SetAction(int _actionType);
	private: void CHANGE_FLOAT_LERP_Create(void);
	private: void CHANGE_PLAYING_MODE_SetAction(int _actionType);
	private: void CHANGE_PLAYING_MODE_Create(void);
	private: void CHANGE_PLAYING_STATE_SetAction(int _actionType);
	private: void CHANGE_PLAYING_STATE_Create(void);
	private: void CHANGE_PLAYING_DURATION_SetAction(int _actionType);
	private: void CHANGE_PLAYING_DURATION_Create(void);
	private: void CHANGE_INPUT_TIMING_SetAction(int _actionType);
	private: void CHANGE_INPUT_TIMING_Create(void);
	private: void STREAMING_QUATERNION_CURRENT_SetAction(int _actionType);
	private: void STREAMING_QUATERNION_CURRENT_Create(void);
	private: void STREAMING_VECTOR_CURRENT_SetAction(int _actionType);
	private: void STREAMING_VECTOR_CURRENT_Create(void);
	private: void STREAMING_QUATERNION_DELTA_SetAction(int _actionType);
	private: void STREAMING_QUATERNION_DELTA_Create(void);
	private: void STREAMING_VECTOR_DELTA_SetAction(int _actionType);
	private: void STREAMING_VECTOR_DELTA_Create(void);
	private: void CHECK_LINE_IN_IMAGE_SetAction(int _actionType);
	private: void CHECK_LINE_IN_IMAGE_Create(void);
	private: void CHECK_LINE_IN_POLYGON_SetAction(int _actionType);
	private: void CHECK_LINE_IN_POLYGON_Create(void);
	private: void CHECK_LINE_IN_SURFACE_SetAction(int _actionType);
	private: void CHECK_LINE_IN_SURFACE_Create(void);
	private: void SET_TWO_VECTORS_SetAction(int _actionType);
	private: void SET_TWO_VECTORS_Create(void);
	private: void SET_TWO_QUATERNIONS_SetAction(int _actionType);
	private: void SET_TWO_QUATERNIONS_Create(void);
	private: void CHANGE_VALUE_RANGE_SetAction(int _actionType);
	private: void CHANGE_VALUE_RANGE_Create(void);
	private: void CHANGE_CONTROL_VECTORS_SetAction(int _actionType);
	private: void CHANGE_CONTROL_VECTORS_Create(void);
	private: void CHANGE_CONTROL_QUATERNIONS_SetAction(int _actionType);
	private: void CHANGE_CONTROL_QUATERNIONS_Create(void);
	private: void ENABLE_COLLISION_POLYGONS_INFO_SetAction(int _actionType);
	private: void ENABLE_COLLISION_POLYGONS_INFO_Create(void);
	private: void ENABLE_COLLISION_CHECKING_SetAction(int _actionType);
	private: void ENABLE_COLLISION_CHECKING_Create(void);
	private: void CHANGE_COLLISION_GROUP_SetAction(int _actionType);
	private: void CHANGE_COLLISION_GROUP_Create(void);
	private: void CHECK_COLLISION_SetAction(int _actionType);
	private: void CHECK_COLLISION_Create(void);
	private: void SWAP_ITEMS_SetAction(int _actionType);
	private: void SWAP_ITEMS_Create(void);
	private: void GET_RANDOM_VALUE_SetAction(int _actionType);
	private: void GET_RANDOM_VALUE_Create(void);
	private: void CREATE_ROTATION_FROM_TO_SetAction(int _actionType);
	private: void CREATE_ROTATION_FROM_TO_Create(void);
	private: void CREATE_ROTATION_SetAction(int _actionType);
	private: void CREATE_ROTATION_Create(void);
	private: void CHANGE_BOX_TEXTURE_MAP_SetAction(int _actionType);
	private: void CHANGE_BOX_TEXTURE_MAP_Create(void);
	private: void CREATE_BOX_TEXTURE_MAP_SetAction(int _actionType);
	private: void CREATE_BOX_TEXTURE_MAP_Create(void);
	private: void GET_LINE_ANGLE_Z_SetAction(int _actionType);
	private: void GET_LINE_ANGLE_Z_Create(void);
	private: void CHANGE_VIEWING_POINT_SetAction(int _actionType);
	private: void CHANGE_VIEWING_POINT_Create(void);
	private: void CHANGE_DISTANCE_TO_VIEWING_POINT_SetAction(int _actionType);
	private: void CHANGE_DISTANCE_TO_VIEWING_POINT_Create(void);
	private: void CHANGE_ZOOM_SPEED_SetAction(int _actionType);
	private: void CHANGE_ZOOM_SPEED_Create(void);
	private: void CHANGE_ZOOM_NEAR_SetAction(int _actionType);
	private: void CHANGE_ZOOM_NEAR_Create(void);
	private: void CHANGE_ZOOM_FAR_SetAction(int _actionType);
	private: void CHANGE_ZOOM_FAR_Create(void);
	private: void CHANGE_HITBOX_SetAction(int _actionType);
	private: void CHANGE_HITBOX_Create(void);
	private: void CAMERA_LOOK_AT_SetAction(int _actionType);
	private: void CAMERA_LOOK_AT_Create(void);
	private: void CHANGE_VECTOR_COMPONENT_SetAction(int _actionType);
	private: void CHANGE_VECTOR_COMPONENT_Create(void);
	private: void GET_VECTOR_COMPONENT_SetAction(int _actionType);
	private: void GET_VECTOR_COMPONENT_Create(void);
	private: void VECTOR_TO_SPHERICAL_SetAction(int _actionType);
	private: void VECTOR_TO_SPHERICAL_Create(void);
	private: void GET_NORMALIZED_VECTOR_SetAction(int _actionType);
	private: void GET_NORMALIZED_VECTOR_Create(void);
	private: void GET_VECTOR_ANGLE_SetAction(int _actionType);
	private: void GET_VECTOR_ANGLE_Create(void);
	private: void GET_VECTOR_LENGTH_SetAction(int _actionType);
	private: void GET_VECTOR_LENGTH_Create(void);
	private: void CHECK_FRUSTUM_IN_QUAD_SetAction(int _actionType);
	private: void CHECK_FRUSTUM_IN_QUAD_Create(void);
	private: void GET_DATA_FROM_CONTROL_VECTOR_SetAction(int _actionType);
	private: void GET_DATA_FROM_CONTROL_VECTOR_Create(void);
	private: void SET_DATA_TO_CONTROL_VECTOR_SetAction(int _actionType);
	private: void SET_DATA_TO_CONTROL_VECTOR_Create(void);
	private: void GET_LINE_LENGTH_SetAction(int _actionType);
	private: void GET_LINE_LENGTH_Create(void);
	private: void GET_CIRCLE_LENGTH_SetAction(int _actionType);
	private: void GET_CIRCLE_LENGTH_Create(void);
	private: void CHANGE_COLOR_COMPONENT_SetAction(int _actionType);
	private: void CHANGE_COLOR_COMPONENT_Create(void);
	private: void GET_COLOR_COMPONENT_SetAction(int _actionType);
	private: void GET_COLOR_COMPONENT_Create(void);
	private: void CHANGE_FLOAT_LERP_T_SetAction(int _actionType);
	private: void CHANGE_FLOAT_LERP_T_Create(void);
	private: void GET_FLOAT_LERP_T_SetAction(int _actionType);
	private: void GET_FLOAT_LERP_T_Create(void);
	private: void GET_FLOAT_LERP_CURRENT_SetAction(int _actionType);
	private: void GET_FLOAT_LERP_CURRENT_Create(void);
	private: void GET_FLOAT_LERP_DELTA_SetAction(int _actionType);
	private: void GET_FLOAT_LERP_DELTA_Create(void);
	private: void ENABLE_TEXTURE_FLIP_SetAction(int _actionType);
	private: void ENABLE_TEXTURE_FLIP_Create(void);
	private: void GET_DATA_FROM_CONTROL_QUATERNION_SetAction(int _actionType);
	private: void GET_DATA_FROM_CONTROL_QUATERNION_Create(void);
	private: void SET_DATA_TO_CONTROL_QUATERNION_SetAction(int _actionType);
	private: void SET_DATA_TO_CONTROL_QUATERNION_Create(void);
	private: void ENABLE_FREEZE_SetAction(int _actionType);
	private: void ENABLE_FREEZE_Create(void);
	private: void ROTATE_LIST_SetAction(int _actionType);
	private: void ROTATE_LIST_Create(void);
	private: void ENABLE_STATIC_OBJECT_SetAction(int _actionType);
	private: void ENABLE_STATIC_OBJECT_Create(void);
	private: void CHANGE_DELTA_SCALE_SetAction(int _actionType);
	private: void CHANGE_DELTA_SCALE_Create(void);
	private: void ENABLE_SHOW_SetAction(int _actionType);
	private: void ENABLE_SHOW_Create(void);
	private: void GET_LINE_DIRECTION_SetAction(int _actionType);
	private: void GET_LINE_DIRECTION_Create(void);
	private: void MOVE_AROUND_PIVOT_SetAction(int _actionType);
	private: void MOVE_AROUND_PIVOT_Create(void);
	private: void ROTATE_AROUND_PIVOT_SetAction(int _actionType);
	private: void ROTATE_AROUND_PIVOT_Create(void);
	private: void CREATE_BRUSH_SetAction(int _actionType);
	private: void CREATE_BRUSH_Create(void);
	private: void CHECK_TILE_EXIST_SetAction(int _actionType);
	private: void CHECK_TILE_EXIST_Create(void);
	private: void CHECK_TILE_PASS_SetAction(int _actionType);
	private: void CHECK_TILE_PASS_Create(void);
	private: void CHANGE_TILE_PASS_SetAction(int _actionType);
	private: void CHANGE_TILE_PASS_Create(void);
	private: void CHECK_TILE_SOLID_SetAction(int _actionType);
	private: void CHECK_TILE_SOLID_Create(void);
	private: void CREATE_SOLID_TILE_SetAction(int _actionType);
	private: void CREATE_SOLID_TILE_Create(void);
	private: void GET_BRUSH_OF_TILE_SetAction(int _actionType);
	private: void GET_BRUSH_OF_TILE_Create(void);
	private: void CHANGE_TILED_SPACE_SIZE_SetAction(int _actionType);
	private: void CHANGE_TILED_SPACE_SIZE_Create(void);
	private: void SET_PUBLIC_TILE_SetAction(int _actionType);
	private: void SET_PUBLIC_TILE_Create(void);
	private: void SET_PUBLIC_TEXTURE_SetAction(int _actionType);
	private: void SET_PUBLIC_TEXTURE_Create(void);
	private: void GET_TILE_CENTER_SetAction(int _actionType);
	private: void GET_TILE_CENTER_Create(void);
	private: void MOVE_TILE_FROM_TO_SetAction(int _actionType);
	private: void MOVE_TILE_FROM_TO_Create(void);
	private: void SWAP_TWO_TILES_SetAction(int _actionType);
	private: void SWAP_TWO_TILES_Create(void);
	private: void COPY_TILE_SetAction(int _actionType);
	private: void COPY_TILE_Create(void);
	private: void CREATE_TILED_SPACE_SetAction(int _actionType);
	private: void CREATE_TILED_SPACE_Create(void);
	private: void GET_VIEWING_POINT_SetAction(int _actionType);
	private: void GET_VIEWING_POINT_Create(void);
	private: void GET_CAMERA_LOOK_SetAction(int _actionType);
	private: void GET_CAMERA_LOOK_Create(void);
	private: void GET_VECTOR_LERP_PATH_SetAction(int _actionType);
	private: void GET_VECTOR_LERP_PATH_Create(void);
	private: void CHANGE_STRIP_POINTS_SetAction(int _actionType);
	private: void CHANGE_STRIP_POINTS_Create(void);
	private: void GET_VECTOR_LERP_T_SetAction(int _actionType);
	private: void GET_VECTOR_LERP_T_Create(void);
	private: void GET_QUATERNION_LERP_T_SetAction(int _actionType);
	private: void GET_QUATERNION_LERP_T_Create(void);
	private: void GET_QUATERNION_LERP_PATH_SetAction(int _actionType);
	private: void GET_QUATERNION_LERP_PATH_Create(void);
	private: void GET_LIST_LENGTH_SetAction(int _actionType);
	private: void GET_LIST_LENGTH_Create(void);
	private: void GET_RADIUS_FROM_2_POINTS_SetAction(int _actionType);
	private: void GET_RADIUS_FROM_2_POINTS_Create(void);
	private: void GET_RADIUS_FROM_3_POINTS_SetAction(int _actionType);
	private: void GET_RADIUS_FROM_3_POINTS_Create(void);
	private: void GET_CONTROL_VECTORS_SetAction(int _actionType);
	private: void GET_CONTROL_VECTORS_Create(void);
	private: void GET_CONTROL_QUATERNIONS_SetAction(int _actionType);
	private: void GET_CONTROL_QUATERNIONS_Create(void);
	private: void CHECK_EQUALITY_SetAction(int _actionType);
	private: void CHECK_EQUALITY_Create(void);

};



#endif 

