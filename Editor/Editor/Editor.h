#ifndef EDITOR_H
#define EDITOR_H
#include <QtGui>
#include <QMainWindow>
#include <Engine/Core/Numerical/Numerical.h>
#include <Editor/Viewport/Viewport.h>
#include <Editor/Editor/EngineEx/EngineEx.h>
#include <Editor/AssetManager/AssetManager.h>
#include <Editor/DesignToolBar/DesignToolBar.h>
#include <Editor/ControlToolBar/ControlToolBar.h>
class Editor: public QMainWindow
{
	Q_OBJECT
	private: EngineEx* engine;
    private: QTimer* intervalTimer;
	private: Viewport* viewport;
	private: QMenu* sceneMenu;
	private: QAction* newSceneAct;
	private: QAction* openSceneAct;
	private: QAction* saveAsSceneAct;
    private: QAction* exitAct;
	private: AssetManager* assetManager;
	private: QMenu* toolsMenu;
	private: QMenu* designToolsMenu;
	private: QAction* viewToolAct;
	private: QAction* selectToolAct;
    private: QAction* moveToolAct;
	private: QAction* eraseToolAct;
	private: QAction* scaleToolAct;
	private: QAction* rotateToolAct;

    private: DesignToolBar* designToolBar;
    private: ControlToolBar* controlToolBar;
	private: QMenu* assetsMenu;
	private: QMenu* graphicsAssetMenu;
	private: QMenu* texturesAssetMenu;
	private: QAction* newTextureAct;
	private: QAction* editTextureAct;
    private: QMenu* atlasesAssetMenu;
	private: QAction* newAtlasAct;
	private: QAction* editAtlasAct;
	private: QMenu* animationsAssetMenu;
    private: QMenu* texturedAnimationsAssetMenu;
	private: QAction* texturedAnimationNewAct;
	private: QAction* texturedAnimationEditAct;
	private: QMenu* logicsAssetMenu;
	private: QAction* assetsImportAct;
	private: QMenu* triggersAssetMenu;
    private: QAction* triggerNewAct;
	private: QAction* triggersEditAct;
	private: QMenu* actionsAssetMenu;
    private: QAction* actionNewAct;
	private: QAction* actionsEditAct;
	private: QMenu* eventsAssetMenu;
    private: QAction* eventNewAct;
	private: QAction* eventsEditAct;
	private: QMenu* variablesAssetMenu;
    private: QAction* variableNewAct;
	private: QAction* variablesEditAct;
	private: QMenu* objectsAssetMenu;
	private: QAction* objectReviewAct;
    private: QAction* objectNewAct;
	private: QMenu* controlsAssetMenu;
	private: QMenu* playerControlsAssetMenu;
	private: QAction* playerControlEditAct;
    private: QAction* playerControlNewAct;
    private: QMenu* lerpsAssetMenu;
	private: QMenu* floatLerpsAssetMenu;
	private: QAction* floatLerpNewAct;
	private: QAction* floatLerpEditAct;
	private: QMenu* quaternionLerpsAssetMenu;
	private: QAction* quaternionLerpNewAct;
	private: QAction* quaternionLerpEditAct;
    private: QMenu* vectorLerpsAssetMenu;
	private: QAction* vectorLerpNewAct;
	private: QAction* vectorLerpEditAct;
	private: QMenu* hitboxesAssetMenu;
	private: QAction* hitboxEditAct;
    private: QAction* hitboxNewAct;
    private: QMenu* helpMenu;
	private: QAction* showContactsAct;
    private: QAction* showDocAct;

    private: QLabel* cursorPosLabel;
	private: QLabel* cameraPosLabel;
    private: static QString editorName;
	private: static QString version;
	private: static float b;
	private: static float c;
	private: static float bf;
    private: static float cf;
	private: static float df;
	private: static QString stability;

    private: static SimpleList<HANDLE> processes;
	private: static QString workDir;
	private: static QString docsDir;
	private: static QString resDir;
	private: static QString tempDir;
	public: Editor(QWidget* _parent = 0, Qt::WFlags _flags = 0);
	public: ~Editor(void);
	public: static void _DestroyProcesses(void);
	public: static SimpleList<HANDLE>& _GetProcesses(void);
    protected: virtual void closeEvent(QCloseEvent *_event);
	private: bool PreClose(void);
	private: void CreateMainMenu(void);
	private: void DestroyMainMenu(void);
	private: void CreateToolsMenu(void);
	private: void CreateControlToolBar(void);
	public: ControlToolBar* GetControlToolBar(void)const;
	private: void LoadRootTrigger(void);
	private slots: void PickPauseTool(void);
	private slots: void PickPlayTool(void);
	private slots: void PickStopTool(void);
	private slots: void PickNextTool(void);
	private slots: void RecordToolIsDisabled(void);
	private slots: void TimeSpeedToolIsChanged(void);
	private slots: void ShowTimeToolIsChanged(void);
	public: DesignToolBar* GetDesignToolBar(void)const;
	private: void DestroyDesignTools(void);
	private: void CreateDesignToolsMenu(void);
	private: void CreateEraseTool(void);
	private: void CreateSelectTool(void);
	private: void CreateMoveTool(void);
	private: void CreateRotateTool(void);
	private: void CreateScaleTool(void);
	private slots: void UnpickDesignSelectTool(void);
	private slots: void UnpickDesignMoveTool(void);
	private slots: void UnpickDesignScaleTool(void);
	private slots: void UnpickDesignRotateTool(void);
	private slots: void UnpickDesignEraseTool(void);
	public slots: void PickSelectTool(void);
	public slots: void PickMoveTool(void);
	public slots: void PickEraseTool(void);
	public slots: void PickScaleTool(void);
	public slots: void PickRotateTool(void);
	private: void CreateDesignTools(void);
	private slots: void ViewToolHome(void);
	private slots: void ScaleToolHome(void);
	private slots: void MoveToolHome(void);
	private slots: void RotateToolHome(void);
	private slots: void ViewToolShowSightEnableIsChanged(bool _enable);
	private slots: void ViewToolMovementEnableIsChanged(bool _enable);
	private slots: void ViewToolZoomEnableIsChanged(void);
	private slots: void ViewToolRotationEnableIsChanged(void);
	private slots: void ViewToolFirstPersonIsChecked(void);
	private slots: void ViewToolObjectViewerIsChecked(void);
	private slots: void ViewToolPerspectiveIsChecked(void);
	private slots: void ViewToolOrthographicIsChecked(void);
	private slots: void ViewToolScreenIsChecked(void);
	private slots: void ViewToolSpectatorIsChecked(void);
	private slots: void ViewToolOverlandIsChecked(void);
	private slots: void ViewToolFlightIsChecked(void);
	private: void CreateSceneMenu(void);
	private: void CreateNewSceneAct(void);
	private: void CreateOpenSceneAct(void);
	private: void CreateSaveAsSceneAct(void);
	private: void CreateExitAct(void);
	private slots: void NewScene(void);
	private slots: void SaveSceneAs(void);
	private slots: void OpenScene(void);
	private slots: void Exit(void);
    private: void CreateHelpMenu(void);
	private slots: void ShowDoc(void);
	private slots: void ShowContacts(void);
	public: void UpdateCursorPos(Vector2 _cursorPos);
	public: void UpdateCameraPos(Vector3 _cameraPos);
	private: void CreateAssetsMenu(void);
	private: void CreateAssetsImportAct(void);
	private: void CreateGraphicsMenu(void);
	private: void CreateAnimationsMenu(void);
	private: void CreateTexturedAnimationsMenu(void);
	private: void CreateNewTexturedAnimationAct(void);
	private: void CreateEditTexturedAnimationAct(void);
	public slots: void NewTexturedAnimation(void);
	public slots: void EditTexturedAnimation(void);
	public: void EditTexturedAnimation(QString _name);
	private: void CreateAtlasesMenu(void);
	private: void CreateNewAtlasAct(void);
	public slots: void NewAtlas(void);
	public slots: void CreateEditAtlasAct(void);
	public slots: void EditAtlas(void);
	private: void EditAtlas(QString _name);
	private: void CreateTexturesMenu(void);
	private: void CreateNewTextureAct(void);
	public slots: void NewTexture(void);
	public slots: void CreateEditTextureAct(void);
	public slots: void EditTexture(void);
	private: void EditTexture(QString _name);
	private: void CreateLogicsMenu(void);
	private: void CreateLerpsMenu(void);
	private: void CreateFloatLerpsMenu(void);
	private: void CreateNewFloatLerpAct(void);
	private: void CreateEditFloatLerpAct(void);
	public slots: void NewFloatLerp(void);
	public slots: void EditFloatLerp(void);
	public: void EditFloatLerp(QString _name);
	private: void CreateQuaternionLerpsMenu(void);
	private: void CreateNewQuaternionLerpAct(void);
	private: void CreateEditQuaternionLerpAct(void);
	public slots: void NewQuaternionLerp(void);
	public slots: void EditQuaternionLerp(void);
	public: void EditQuaternionLerp(QString _name);
	private: void CreateVectorLerpsMenu(void);
	private: void CreateNewVectorLerpAct(void);
	private: void CreateEditVectorLerpAct(void);
	public slots: void NewVectorLerp(void);
	public slots: void EditVectorLerp(void);
	public: void EditVectorLerp(QString _name);
	private: void CreateTriggersMenu(void);
	private: void CreateNewTriggerAct(void);
	private: void CreateEditTriggerAct(void);
	public slots: void NewTrigger(void);
	public slots: void EditTrigger(void);
	public slots: void AssetsImport(void);
	private: void EditTrigger(QString _name);
	private: void CreateActionsMenu(void);
	private: void CreateNewActionAct(void);
	private: void CreateEditActionAct(void);
	public slots: void NewAction(void);
	public slots: void EditAction(void);
	private: void EditAction(QString _name);
	private: void CreateEventsMenu(void);
	private: void CreateNewEventAct(void);
	private: void CreateEditEventAct(void);
	public slots: void NewEvent(void);
	public slots: void EditEvent(void);
	private: void EditEvent(QString _name);
	private: void CreateVariablesMenu(void);
	private: void CreateNewVariableAct(void);
	private: void CreateEditVariableAct(void);
	public slots: void NewVariable(void);
	public slots: void EditVariable(void);
	private: void EditVariable(QString _name);
	private: void CreateObjectsMenu(void);
	private: void CreateNewObjectAct(void);
	private: void CreateReviewObjectAct(void);
	public slots: void NewObject(void);
	public slots: void ReviewObject(void);
	private: void ReviewObject(QString _path);
	private: void CreateHitboxesMenu(void);
	private: void CreateNewHitboxAct(void);
	private: void CreateEditHitboxAct(void);
	public slots: void NewHitbox(void);
	public slots: void EditHitbox(void);
	private: void EditHitbox(QString _name);
	private: void CreateControlsMenu(void);
	private: void CreatePlayerControlsMenu(void);
	private: void CreateNewPlayerControlAct(void);
	private: void CreateEditPlayerControlAct(void);
	public slots: void NewPlayerControl(void);
	public slots: void EditPlayerControl(void);
	private: void EditPlayerControl(QString _name);
	private: void CreateViewport(void);
	private: void DestroyViewport(void);
	private: void CreateEngine(void);
    private: void DestroyEngine(void);
	public: void DestroyScene(void);
	public: void LoadScene(QString _path);
	public: void RestoreSystemCursor(void);
	public: bool IsViewportFocus(void)const;
	private slots: void ViewportCursorEnter(void);
	private slots: void ViewportCursorLeave(void);
	public: EngineEx* GetEngine(void)const;
	private: void LoadConfigFile(void);
	private: void LoadEditorConfigFile(void);
	private: void LoadEngineConfigFile(void);
	private: void SaveEditorConfigFile(void);
	private slots: void CallFrame(void);
	public: void EnginePause(void);
	public: void EnginePlay(void);
	private: void CreateAssetManager(void);
	private: void DestroyAssetManager(void);
	public: AssetManager* GetAssetManager(void)const;
	private slots: void SelectObject(GraphicsSurface* _object);
	private slots: void UnselectObject(GraphicsSurface* _object);
	public: static QString _GetWorkDir(void);
	public: static QString _GetDocsDir(void);
	public: static QString _GetTempDir(void);
	public: static QString _GetResDir(void);
};

#endif 
